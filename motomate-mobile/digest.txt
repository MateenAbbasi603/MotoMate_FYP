Directory structure:
└── motomate-mobile/
    ├── App.tsx
    ├── AuthContext.tsx
    ├── apiService.ts
    ├── app.json
    ├── babel.config.js
    ├── metro.config.js
    ├── package.json
    ├── tailwind.config.js
    ├── tsconfig.json
    ├── assets/
    ├── src/
    │   ├── context/
    │   │   └── AuthContext.tsx
    │   ├── navigation/
    │   │   └── CustomerTabNavigator.tsx
    │   ├── screens/
    │   │   ├── DashboardScreen.tsx
    │   │   ├── LandingScreen.tsx
    │   │   ├── LoginScreen.tsx
    │   │   ├── SignupScreen.tsx
    │   │   └── customer/
    │   │       ├── VehiclesScreen.tsx
    │   │       ├── NewOrderScreen/
    │   │       │   └── index.tsx
    │   │       └── OrderHistoryScreen/
    │   │           ├── [orderId].tsx
    │   │           └── index.tsx
    │   ├── services/
    │   │   └── apiService.ts
    │   └── types/
    │       └── declarations.d.ts
    └── .expo/
        ├── README.md
        ├── devices.json
        └── settings.json

================================================
File: App.tsx
================================================
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { StatusBar } from 'expo-status-bar';
import * as SecureStore from 'expo-secure-store';
import { View, ActivityIndicator } from 'react-native';

// Screens
import LandingScreen from './src/screens/LandingScreen';
import LoginScreen from './src/screens/LoginScreen';
import SignupScreen from './src/screens/SignupScreen';
import DashboardScreen from './src/screens/DashboardScreen';

// Navigation
import CustomerTabNavigator from './src/navigation/CustomerTabNavigator';

// Context
import { AuthProvider, useAuth } from './src/context/AuthContext';

const Stack = createNativeStackNavigator<RootStackParamList>();

function AppNavigator() {
  const { user, loading } = useAuth();

  console.log('User in AppNavigator:', user);
  console.log('User role in AppNavigator:', user?.role);

  if (loading) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size="large" color="#3B82F6" />
      </View>
    );
  }

  return (
    <NavigationContainer>
      <Stack.Navigator
        screenOptions={{
          headerShown: false,
          gestureEnabled: true,
        }}
      >
        {user ? (
          // Role-based navigation
          user.role?.toLowerCase() === 'customer' ? (
            <Stack.Screen name="CustomerDashboard" component={CustomerTabNavigator} />
          ) : (
            // Admin/Staff navigation (to be implemented)
            <Stack.Screen name="Dashboard" component={DashboardScreen} />
          )
        ) : (
          // Authentication screens
          <>
            <Stack.Screen name="Landing" component={LandingScreen} />
            <Stack.Screen name="Login" component={LoginScreen} />
            <Stack.Screen name="Signup" component={SignupScreen} />
          </>
        )}
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default function App() {
  return (
    <AuthProvider>
      <StatusBar style="auto" />
      <AppNavigator />
    </AuthProvider>
  );
}

export type RootStackParamList = {
  Landing: undefined;
  Login: undefined;
  Signup: undefined;
  Dashboard: undefined;
  CustomerDashboard: undefined;
  ForgotPassword: undefined;
};


================================================
File: AuthContext.tsx
================================================
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import * as SecureStore from 'expo-secure-store';
import { apiService } from './src/services/apiService';


interface User {
  userId: number;
  username: string;
  email: string;
  role: string;
  name: string;
  phone?: string;
  address?: string;
  imgUrl?: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (username: string, password: string) => Promise<{ success: boolean; message?: string }>;
  signup: (userData: SignupData) => Promise<{ success: boolean; message?: string }>;
  logout: () => Promise<void>;
}

interface SignupData {
  username: string;
  password: string;
  confirmPassword: string;
  email: string;
  name: string;
  phone?: string;
  address?: string;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    try {
      const token = await SecureStore.getItemAsync('authToken');
      if (token) {
        // Set the token in API service
        apiService.setAuthToken(token);
        
        // Get user profile
        const response = await apiService.getCurrentUser();
        if (response.success) {
          setUser(response.data);
        } else {
          // Token is invalid, remove it
          await SecureStore.deleteItemAsync('authToken');
        }
      }
    } catch (error) {
      console.error('Error checking auth status:', error);
      await SecureStore.deleteItemAsync('authToken');
    } finally {
      setLoading(false);
    }
  };

  const login = async (username: string, password: string) => {
    try {
      const response = await apiService.login({ username, password });
      
      if (response.success && response.data) {
        // Store token securely
        await SecureStore.setItemAsync('authToken', response.data.token);
        
        // Set token in API service
        apiService.setAuthToken(response.data.token);
        
        // Set user data
        setUser(response.data.user);
        
        return { success: true };
      } else {
        return { 
          success: false, 
          message: response.message || 'Login failed' 
        };
      }
    } catch (error: any) {
      console.error('Login error:', error);
      return { 
        success: false, 
        message: error.response?.data?.message || 'Network error occurred' 
      };
    }
  };

  const signup = async (userData: SignupData) => {
    try {
      const response = await apiService.register({
        username: userData.username,
        password: userData.password,
        confirmPassword: userData.confirmPassword,
        email: userData.email,
        name: userData.name,
        phone: userData.phone || '',
        address: userData.address || '',
        role: 'customer'
      });
      
      if (response.success && response.data) {
        // Store token securely
        await SecureStore.setItemAsync('authToken', response.data.token);
        
        // Set token in API service
        apiService.setAuthToken(response.data.token);
        
        // Set user data
        setUser(response.data.user);
        
        return { success: true };
      } else {
        return { 
          success: false, 
          message: response.message || 'Registration failed' 
        };
      }
    } catch (error: any) {
      console.error('Signup error:', error);
      return { 
        success: false, 
        message: error.response?.data?.message || 'Network error occurred' 
      };
    }
  };

  const logout = async () => {
    try {
      await SecureStore.deleteItemAsync('authToken');
      apiService.removeAuthToken();
      setUser(null);
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  return (
    <AuthContext.Provider value={{
      user,
      loading,
      login,
      signup,
      logout
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}


================================================
File: apiService.ts
================================================
import axios, { AxiosInstance, AxiosResponse, InternalAxiosRequestConfig, AxiosError } from 'axios';

// Update this with your actual backend URL
const BASE_URL = 'https://localhost:5177'; // Replace with your backend URL

interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  data?: T;
}

interface LoginRequest {
  username: string;
  password: string;
}

interface RegisterRequest {
  username: string;
  password: string;
  confirmPassword: string;
  email: string;
  name: string;
  phone: string;
  address: string;
  role: string;
}

interface AuthResponse {
  success: boolean;
  message: string;
  token: string;
  user: {
    userId: number;
    username: string;
    email: string;
    role: string;
    name: string;
    phone: string;
    address: string;
    imgUrl: string;
  };
}

class ApiService {
  private api: AxiosInstance;

  constructor() {
    this.api = axios.create({
      baseURL: BASE_URL,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    // Request interceptor
    this.api.interceptors.request.use(
      (config: InternalAxiosRequestConfig) => {
        console.log(`Making ${config.method?.toUpperCase()} request to: ${config.url}`);
        return config;
      },
      (error: AxiosError) => {
        console.error('Request error:', error);
        return Promise.reject(error);
      }
    );

    // Response interceptor
    this.api.interceptors.response.use(
      (response: AxiosResponse) => {
        return response;
      },
      (error: AxiosError) => {
        console.error('Response error:', error.response?.data || error.message);
        return Promise.reject(error);
      }
    );
  }

  setAuthToken(token: string) {
    this.api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  removeAuthToken() {
    delete this.api.defaults.headers.common['Authorization'];
  }

  // Auth endpoints
  async login(credentials: LoginRequest): Promise<ApiResponse<AuthResponse>> {
    try {
      const response: AxiosResponse<AuthResponse> = await this.api.post('/auth/login', credentials);
      return {
        success: true,
        data: response.data,
        message: 'Login successful'
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Login failed'
      };
    }
  }

  async register(userData: RegisterRequest): Promise<ApiResponse<AuthResponse>> {
    try {
      const response: AxiosResponse<AuthResponse> = await this.api.post('/auth/register', userData);
      return {
        success: true,
        data: response.data,
        message: 'Registration successful'
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Registration failed'
      };
    }
  }

  async getCurrentUser(): Promise<ApiResponse> {
    try {
      const response = await this.api.get('/auth/me');
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to get user profile'
      };
    }
  }

  // Vehicles endpoints
  async getVehicles(): Promise<ApiResponse> {
    try {
      const response = await this.api.get('/vehicles');
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to get vehicles'
      };
    }
  }

  // Orders endpoints
  async getOrders(): Promise<ApiResponse> {
    try {
      const response = await this.api.get('/orders');
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to get orders'
      };
    }
  }

  // Services endpoints
  async getServices(): Promise<ApiResponse> {
    try {
      const response = await this.api.get('/services');
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to get services'
      };
    }
  }

  // Notifications endpoints
  async getNotifications(): Promise<ApiResponse> {
    try {
      const response = await this.api.get('/notifications');
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to get notifications'
      };
    }
  }

  // Generic GET request
  async get(endpoint: string): Promise<ApiResponse> {
    try {
      const response = await this.api.get(endpoint);
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Request failed'
      };
    }
  }

  // Generic POST request
  async post(endpoint: string, data: any): Promise<ApiResponse> {
    try {
      const response = await this.api.post(endpoint, data);
      return {
        success: true,
        data: response.data
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.response?.data?.message || 'Request failed'
      };
    }
  }
}

export const apiService = new ApiService();


================================================
File: app.json
================================================
{
  "expo": {
    "name": "motomate-mobile",
    "slug": "motomate-mobile",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "updates": {
      "fallbackToCacheTimeout": 0
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.motomate.mobile"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.motomate.mobile"
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "plugins": [
      "expo-secure-store",
      "expo-font"
    ],
    "extra": {
      "eas": {
        "projectId": "758fdb45-36bb-4659-84d7-97e896cc3e1e"
      }
    },
    "owner": "imateenn",
    "sdkVersion": "53.0.0"
  }
}



================================================
File: babel.config.js
================================================
module.exports = function(api) {
    api.cache(true);
    return {
      presets: ['babel-preset-expo'],
      plugins: [
        'nativewind/babel',
        'react-native-reanimated/plugin',
      ],
    };
  };


================================================
File: metro.config.js
================================================
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = {
  ...config,
  resolver: {
    ...config.resolver,
    sourceExts: [...config.resolver.sourceExts, 'mjs', 'cjs'],
  },
}; 


================================================
File: package.json
================================================
{
  "name": "motomate-mobile",
  "version": "1.0.0",
  "main": "expo/AppEntry.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.1.0",
    "@react-navigation/bottom-tabs": "^6.6.1",
    "@react-navigation/native": "^6.1.9",
    "@react-navigation/native-stack": "^6.9.17",
    "axios": "^1.6.2",
    "expo": "~53.0.0",
    "expo-constants": "~17.1.6",
    "expo-font": "~13.3.1",
    "expo-image-picker": "~16.1.4",
    "expo-linear-gradient": "~14.1.4",
    "expo-router": "^5.0.7",
    "expo-secure-store": "~14.2.3",
    "expo-status-bar": "~2.2.3",
    "nativewind": "^2.0.11",
    "react": "19.0.0",
    "react-native": "0.79.2",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.10.0",
    "react-native-vector-icons": "^10.0.2"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@types/node": "^20.10.0",
    "@types/react": "~19.0.10",
    "@types/react-native": "^0.72.6",
    "tailwindcss": "3.3.2",
    "typescript": "^5.1.3"
  },
  "private": true
}



================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./App.{js,jsx,ts,tsx}",
      "./src/**/*.{js,jsx,ts,tsx}"
    ],
    theme: {
      extend: {
        colors: {
          primary: {
            50: '#eff6ff',
            500: '#3b82f6',
            600: '#2563eb',
            700: '#1d4ed8',
          },
        },
      },
    },
    plugins: [],
  }


================================================
File: tsconfig.json
================================================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": ".",
    "paths": {
      "*": [
        "src/*"
      ]
    },
    "types": [
      "react",
      "react-native",
      "node"
    ],
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "react-native",
    "lib": [
      "es2017"
    ],
    "moduleResolution": "node",
    "noEmit": true,
    "target": "esnext",
    "skipLibCheck": true,
    "resolveJsonModule": true
  },
  "include": [
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules",
    "babel.config.js",
    "metro.config.js",
    "jest.config.js"
  ]
}




================================================
File: src/context/AuthContext.tsx
================================================
import React, { createContext, useContext, useState, useEffect } from 'react';
import * as SecureStore from 'expo-secure-store';
import { apiService } from '../services/apiService';
import { AxiosError } from 'axios';

interface AuthContextType {
  user: any | null;
  loading: boolean;
  login: (username: string, password: string) => Promise<{ success: boolean; message?: string }>;
  signup: (userData: any) => Promise<{ success: boolean; message?: string }>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<any | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadUser();
  }, []);

  const loadUser = async () => {
    try {
      const token = await SecureStore.getItemAsync('token');
      if (token) {
        const response = await apiService.getCurrentUser();
        if (response.success) {
          setUser(response.data);
        } else {
          await SecureStore.deleteItemAsync('token');
          setUser(null);
        }
      }
    } catch (error) {
      console.error('Error loading user:', error);
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const login = async (username: string, password: string) => {
    try {
      console.log('Attempting login...');

      const response = await apiService.login({ username, password });

      if (response.success && response.data?.token) {
        await SecureStore.setItemAsync('token', response.data.token);
        const userResponse = await apiService.getCurrentUser();
        if (userResponse.success) {
          setUser(userResponse.data);
          return { success: true };
        } else {
          await SecureStore.deleteItemAsync('token');
          setUser(null);
          return { success: false, message: userResponse.message || 'Failed to fetch user data after login' };
        }
      } else {
         return { 
          success: false, 
          message: response.message || 'Login failed. Please check your credentials.' 
        };
      }
    } catch (error: any) {
      console.error('Login error:', error);
       if (error.message?.includes('Network error')) {
        return { 
          success: false, 
          message: 'Unable to connect to server. Please ensure the backend server is running and accessible.' 
        };
      }
      // Handle Axios error structure and other potential errors
      const axiosError = error as AxiosError<{ message?: string }>;
      return { 
        success: false, 
        message: axiosError.response?.data?.message || error.message || 'An unexpected error occurred' 
      };
    }
  };

  const signup = async (userData: any) => {
    try {
       console.log('Attempting registration...');

      const response = await apiService.register(userData);
      if (response.success) {
        return { success: true };
      }
       return { success: false, message: response.message || 'Registration failed. Please try again.' };
    } catch (error: any) {
      console.error('Signup error:', error);
       if (error.message?.includes('Network error')) {
        return { 
          success: false, 
          message: 'Unable to connect to server. Please ensure the backend server is running and accessible.' 
        };
      }
       // Handle Axios error structure and other potential errors
       const axiosError = error as AxiosError<{ message?: string }>;
      return { 
        success: false, 
        message: axiosError.response?.data?.message || error.message || 'An unexpected error occurred' 
      };
    }
  };

  const logout = async () => {
    try {
      await SecureStore.deleteItemAsync('token');
      setUser(null);
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, signup, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
} 


================================================
File: src/navigation/CustomerTabNavigator.tsx
================================================
import React from 'react';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { Ionicons } from '@expo/vector-icons';

import OrderHistoryScreen from '../screens/customer/OrderHistoryScreen';
import NewOrderScreen from '../screens/customer/NewOrderScreen';
import VehiclesScreen from '../screens/customer/VehiclesScreen';

const Tab = createBottomTabNavigator();

const CustomerTabNavigator = () => {
  return (
    <Tab.Navigator
      screenOptions={{
        tabBarActiveTintColor: '#3B82F6',
        tabBarInactiveTintColor: '#6B7280',
        tabBarStyle: {
          borderTopWidth: 1,
          borderTopColor: '#E5E7EB',
          paddingTop: 8,
          paddingBottom: 8,
          height: 60,
        },
        tabBarLabelStyle: {
          fontSize: 12,
          fontWeight: '500',
        },
        headerShown: false,
      }}
    >
      <Tab.Screen
        name="Orders"
        component={OrderHistoryScreen}
        options={{
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="list" size={size} color={color} />
          ),
        }}
      />
      <Tab.Screen
        name="New Order"
        component={NewOrderScreen}
        options={{
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="add-circle" size={size} color={color} />
          ),
        }}
      />
      <Tab.Screen
        name="Vehicles"
        component={VehiclesScreen}
        options={{
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="car" size={size} color={color} />
          ),
        }}
      />
    </Tab.Navigator>
  );
};

export default CustomerTabNavigator; 


================================================
File: src/screens/DashboardScreen.tsx
================================================
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { useAuth } from '../context/AuthContext';

export default function DashboardScreen() {
  const { user, logout } = useAuth();

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Dashboard</Text>
      <Text style={styles.welcomeText}>Welcome, {user?.email}</Text>
      <TouchableOpacity style={styles.button} onPress={logout}>
        <Text style={styles.buttonText}>Logout</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginTop: 60,
    marginBottom: 20,
    color: '#333',
  },
  welcomeText: {
    fontSize: 16,
    color: '#666',
    marginBottom: 30,
  },
  button: {
    backgroundColor: '#EF4444',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});


================================================
File: src/screens/LandingScreen.tsx
================================================
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Dimensions,
  Image,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../App';

type LandingScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Landing'>;

const { width, height } = Dimensions.get('window');

const LandingScreen = () => {
  const navigation = useNavigation<LandingScreenNavigationProp>();

  const features = [
    {
      icon: 'car',
      title: 'Vehicle Management',
      description: 'Keep track of all your vehicles and their service history',
    },
    {
      icon: 'calendar',
      title: 'Easy Booking',
      description: 'Schedule inspections and services with just a few taps',
    },
    {
      icon: 'people',
      title: 'Expert Mechanics',
      description: 'Get serviced by certified and experienced mechanics',
    },
    {
      icon: 'notifications',
      title: 'Real-time Updates',
      description: 'Stay informed about your service progress in real-time',
    },
  ];

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      {/* Hero Section */}
      <LinearGradient
        colors={['#3B82F6', '#1E40AF', '#1E3A8A']}
        style={styles.heroSection}
      >
        <View style={styles.heroContent}>
          {/* Logo/Brand */}
          <View style={styles.brandContainer}>
            <Ionicons name="construct" size={50} color="white" />
            <Text style={styles.brandName}>MotoMate</Text>
            <Text style={styles.brandTagline}>Your Auto Service Companion</Text>
          </View>

          {/* Hero Image Placeholder */}
          <View style={styles.heroImageContainer}>
            <Ionicons name="car-sport" size={120} color="rgba(255,255,255,0.8)" />
          </View>

          {/* CTA Buttons */}
          <View style={styles.ctaContainer}>
            <TouchableOpacity
              style={styles.primaryButton}
              onPress={() => navigation.navigate('Signup')}
              activeOpacity={0.8}
            >
              <Text style={styles.primaryButtonText}>Get Started</Text>
              <Ionicons name="arrow-forward" size={20} color="#3B82F6" />
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.secondaryButton}
              onPress={() => navigation.navigate('Login')}
              activeOpacity={0.8}
            >
              <Text style={styles.secondaryButtonText}>Sign In</Text>
            </TouchableOpacity>
          </View>
        </View>
      </LinearGradient>

      {/* Features Section */}
      <View style={styles.featuresSection}>
        <Text style={styles.sectionTitle}>Why Choose MotoMate?</Text>
        
        <View style={styles.featuresGrid}>
          {features.map((feature, index) => (
            <View key={index} style={styles.featureCard}>
              <View style={styles.featureIconContainer}>
                <Ionicons 
                  name={feature.icon as any} 
                  size={32} 
                  color="#3B82F6" 
                />
              </View>
              <Text style={styles.featureTitle}>{feature.title}</Text>
              <Text style={styles.featureDescription}>{feature.description}</Text>
            </View>
          ))}
        </View>
      </View>

      {/* How It Works Section */}
      <View style={styles.howItWorksSection}>
        <Text style={styles.sectionTitle}>How It Works</Text>
        
        <View style={styles.stepsContainer}>
          <View style={styles.stepItem}>
            <View style={styles.stepNumber}>
              <Text style={styles.stepNumberText}>1</Text>
            </View>
            <View style={styles.stepContent}>
              <Text style={styles.stepTitle}>Create Account</Text>
              <Text style={styles.stepDescription}>Sign up and add your vehicle details</Text>
            </View>
          </View>

          <View style={styles.stepConnector} />

          <View style={styles.stepItem}>
            <View style={styles.stepNumber}>
              <Text style={styles.stepNumberText}>2</Text>
            </View>
            <View style={styles.stepContent}>
              <Text style={styles.stepTitle}>Book Service</Text>
              <Text style={styles.stepDescription}>Schedule inspection or maintenance</Text>
            </View>
          </View>

          <View style={styles.stepConnector} />

          <View style={styles.stepItem}>
            <View style={styles.stepNumber}>
              <Text style={styles.stepNumberText}>3</Text>
            </View>
            <View style={styles.stepContent}>
              <Text style={styles.stepTitle}>Get Serviced</Text>
              <Text style={styles.stepDescription}>Expert mechanics handle your vehicle</Text>
            </View>
          </View>
        </View>
      </View>

      {/* Footer CTA */}
      <View style={styles.footerCTA}>
        <Text style={styles.footerCTATitle}>Ready to get started?</Text>
        <Text style={styles.footerCTASubtitle}>Join thousands of satisfied customers</Text>
        
        <TouchableOpacity
          style={styles.footerCTAButton}
          onPress={() => navigation.navigate('Signup')}
          activeOpacity={0.8}
        >
          <Text style={styles.footerCTAButtonText}>Create Free Account</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  heroSection: {
    paddingTop: 60,
    paddingBottom: 40,
    paddingHorizontal: 20,
    minHeight: height * 0.7,
    justifyContent: 'center',
  },
  heroContent: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  brandContainer: {
    alignItems: 'center',
    marginBottom: 40,
  },
  brandName: {
    fontSize: 36,
    fontWeight: 'bold',
    color: 'white',
    marginTop: 10,
  },
  brandTagline: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.8)',
    marginTop: 5,
  },
  heroImageContainer: {
    marginBottom: 40,
    padding: 20,
    backgroundColor: 'rgba(255,255,255,0.1)',
    borderRadius: 20,
  },
  ctaContainer: {
    width: '100%',
    gap: 15,
  },
  primaryButton: {
    backgroundColor: 'white',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  primaryButtonText: {
    color: '#3B82F6',
    fontSize: 18,
    fontWeight: '600',
  },
  secondaryButton: {
    borderWidth: 2,
    borderColor: 'white',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 12,
    alignItems: 'center',
  },
  secondaryButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '600',
  },
  featuresSection: {
    padding: 20,
    paddingTop: 40,
  },
  sectionTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1F2937',
    textAlign: 'center',
    marginBottom: 30,
  },
  featuresGrid: {
    gap: 20,
  },
  featureCard: {
    backgroundColor: '#F8FAFC',
    padding: 20,
    borderRadius: 16,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  featureIconContainer: {
    width: 60,
    height: 60,
    backgroundColor: '#EBF4FF',
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 15,
  },
  featureTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
    textAlign: 'center',
  },
  featureDescription: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 20,
  },
  howItWorksSection: {
    padding: 20,
    paddingTop: 40,
    backgroundColor: '#FAFAFA',
  },
  stepsContainer: {
    alignItems: 'center',
  },
  stepItem: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    maxWidth: 300,
  },
  stepNumber: {
    width: 40,
    height: 40,
    backgroundColor: '#3B82F6',
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 15,
  },
  stepNumberText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  stepContent: {
    flex: 1,
  },
  stepTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 4,
  },
  stepDescription: {
    fontSize: 14,
    color: '#6B7280',
  },
  stepConnector: {
    width: 2,
    height: 30,
    backgroundColor: '#D1D5DB',
    marginLeft: 19,
    marginVertical: 10,
  },
  footerCTA: {
    padding: 20,
    paddingTop: 40,
    paddingBottom: 60,
    alignItems: 'center',
  },
  footerCTATitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 8,
    textAlign: 'center',
  },
  footerCTASubtitle: {
    fontSize: 16,
    color: '#6B7280',
    marginBottom: 30,
    textAlign: 'center',
  },
  footerCTAButton: {
    backgroundColor: '#3B82F6',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  footerCTAButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default LandingScreen;


================================================
File: src/screens/LoginScreen.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../App';
import { useAuth } from '../context/AuthContext';
import { apiService } from '../services/apiService';

type LoginScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Login'>;

const LoginScreen = () => {
  const navigation = useNavigation<LoginScreenNavigationProp>();
  const { login } = useAuth();
  
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
    }

    if (!formData.password) {
      newErrors.password = 'Password is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleLogin = async () => {
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    try {
      const result = await login(formData.username.trim(), formData.password);
      
      if (result.success) {
        // Navigation will be handled by the AuthContext
        console.log('Login successful');
      } else {
        Alert.alert('Login Failed', result.message || 'Please check your credentials');
      }
    } catch (error) {
      Alert.alert('Error', 'An unexpected error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const testConnection = async () => {
    try {
      const result = await apiService.testConnection();
      if (result.success) {
        Alert.alert('Success', 'Backend is reachable!');
      } else {
        Alert.alert('Error', `Connection failed: ${result.message}`);
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to test connection');
    }
  };

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container} 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView 
        contentContainerStyle={styles.scrollContainer}
        keyboardShouldPersistTaps="handled"
        showsVerticalScrollIndicator={false}
      >
        {/* Header */}
        <LinearGradient
          colors={['#3B82F6', '#1E40AF']}
          style={styles.header}
        >
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.goBack()}
            activeOpacity={0.7}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          
          <View style={styles.headerContent}>
            <Ionicons name="construct" size={40} color="white" />
            <Text style={styles.headerTitle}>Welcome Back</Text>
            <Text style={styles.headerSubtitle}>Sign in to continue</Text>
          </View>
        </LinearGradient>

        {/* Form */}
        <View style={styles.formContainer}>
          <View style={styles.form}>
            {/* Username Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Username</Text>
              <View style={[
                styles.inputWrapper,
                errors.username ? styles.inputError : null
              ]}>
                <Ionicons name="person-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Enter your username"
                  value={formData.username}
                  onChangeText={(value) => updateFormData('username', value)}
                  autoCapitalize="none"
                  autoCorrect={false}
                />
              </View>
              {errors.username && (
                <Text style={styles.errorText}>{errors.username}</Text>
              )}
            </View>

            {/* Password Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Password</Text>
              <View style={[
                styles.inputWrapper,
                errors.password ? styles.inputError : null
              ]}>
                <Ionicons name="lock-closed-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Enter your password"
                  value={formData.password}
                  onChangeText={(value) => updateFormData('password', value)}
                  secureTextEntry={!showPassword}
                  autoCapitalize="none"
                />
                <TouchableOpacity
                  onPress={() => setShowPassword(!showPassword)}
                  style={styles.passwordToggle}
                  activeOpacity={0.7}
                >
                  <Ionicons 
                    name={showPassword ? "eye-off-outline" : "eye-outline"} 
                    size={20} 
                    color="#6B7280" 
                  />
                </TouchableOpacity>
              </View>
              {errors.password && (
                <Text style={styles.errorText}>{errors.password}</Text>
              )}
            </View>

            {/* Forgot Password Link */}
            <TouchableOpacity
              onPress={() => navigation.navigate('ForgotPassword')}
              style={styles.forgotPasswordContainer}
            >
              <Text style={styles.forgotPasswordText}>Forgot Password?</Text>
            </TouchableOpacity>

            {/* Login Button */}
            <TouchableOpacity
              style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}
              onPress={handleLogin}
              disabled={isLoading}
              activeOpacity={0.8}
            >
              {isLoading ? (
                <ActivityIndicator color="white" size="small" />
              ) : (
                <>
                  <Text style={styles.loginButtonText}>Sign In</Text>
                  <Ionicons name="arrow-forward" size={20} color="white" />
                </>
              )}
            </TouchableOpacity>

            {/* Signup Link */}
            <View style={styles.signupContainer}>
              <Text style={styles.signupText}>Don't have an account? </Text>
              <TouchableOpacity
                onPress={() => navigation.navigate('Signup')}
                activeOpacity={0.7}
              >
                <Text style={styles.signupLink}>Sign Up</Text>
              </TouchableOpacity>
            </View>

            <TouchableOpacity 
              style={[styles.button, { backgroundColor: '#666', marginTop: 10 }]} 
              onPress={testConnection}
            >
              <Text style={styles.buttonText}>Test Backend Connection</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  scrollContainer: {
    flexGrow: 1,
  },
  header: {
    paddingTop: 60,
    paddingBottom: 30,
    paddingHorizontal: 20,
    position: 'relative',
  },
  backButton: {
    position: 'absolute',
    top: 60,
    left: 20,
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerContent: {
    alignItems: 'center',
    marginTop: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    marginTop: 15,
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.8)',
    textAlign: 'center',
  },
  formContainer: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 30,
  },
  form: {
    gap: 20,
  },
  inputContainer: {
    gap: 8,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 12,
    paddingHorizontal: 16,
    minHeight: 52,
  },
  inputError: {
    borderColor: '#EF4444',
    backgroundColor: '#FEF2F2',
  },
  inputIcon: {
    marginRight: 12,
  },
  textInput: {
    flex: 1,
    fontSize: 16,
    color: '#111827',
  },
  passwordToggle: {
    padding: 4,
  },
  errorText: {
    fontSize: 14,
    color: '#EF4444',
    marginTop: 4,
  },
  forgotPasswordContainer: {
    alignItems: 'flex-end',
  },
  forgotPasswordText: {
    color: '#3B82F6',
    fontSize: 14,
    fontWeight: '500',
  },
  loginButton: {
    backgroundColor: '#3B82F6',
    borderRadius: 12,
    paddingVertical: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    marginTop: 10,
  },
  loginButtonDisabled: {
    opacity: 0.7,
  },
  loginButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  signupContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 20,
  },
  signupText: {
    fontSize: 14,
    color: '#6B7280',
  },
  signupLink: {
    fontSize: 14,
    color: '#3B82F6',
    fontWeight: '600',
  },
  button: {
    backgroundColor: '#3B82F6',
    borderRadius: 12,
    paddingVertical: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    marginTop: 10,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default LoginScreen;


================================================
File: src/screens/SignupScreen.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  Alert,
  ActivityIndicator,
  Image,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../App';
import { useAuth } from '../context/AuthContext';
import * as ImagePicker from 'expo-image-picker';

type SignupScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Signup'>;

const SignupScreen = () => {
  const navigation = useNavigation<SignupScreenNavigationProp>();
  const { signup } = useAuth();
  
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    name: '',
    phone: '',
    address: '',
    password: '',
    confirmPassword: '',
    imgUrl: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  const pickImage = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.5,
      });

      if (!result.canceled && result.assets[0].uri) {
        setSelectedImage(result.assets[0].uri);
        setFormData(prev => ({ ...prev, imgUrl: result.assets[0].uri }));
      }
    } catch (error) {
      console.error('Error picking image:', error);
      Alert.alert('Error', 'Failed to pick image. Please try again.');
    }
  };

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    // Username validation
    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
    } else if (formData.username.length < 3) {
      newErrors.username = 'Username must be at least 3 characters';
    } else if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {
      newErrors.username = 'Username can only contain letters, numbers, and underscores';
    }

    // Email validation
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    // Name validation
    if (!formData.name.trim()) {
      newErrors.name = 'Full name is required';
    } else if (formData.name.length < 2) {
      newErrors.name = 'Name must be at least 2 characters';
    }

    // Phone validation (optional)
    if (formData.phone && !/^\d{11}$/.test(formData.phone)) {
      newErrors.phone = 'Phone number must be exactly 11 digits';
    }

    // Password validation
    if (!formData.password) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
      newErrors.password = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';
    }

    // Confirm password validation
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Please confirm your password';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSignup = async () => {
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    try {
      const signupData = {
        username: formData.username.trim(),
        email: formData.email.trim(),
        name: formData.name.trim(),
        phone: formData.phone.trim() || '',
        address: formData.address.trim() || '',
        password: formData.password,
        confirmPassword: formData.confirmPassword,
        role: 'customer',
        imgUrl: formData.imgUrl || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(formData.name.trim())
      };

      const result = await signup(signupData);
      
      if (result.success) {
        Alert.alert('Success', 'Account created successfully!');
        navigation.navigate('Login');
      } else {
        Alert.alert('Registration Failed', result.message || 'Please try again');
      }
    } catch (error) {
      Alert.alert('Error', 'An unexpected error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container} 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView 
        contentContainerStyle={styles.scrollContainer}
        keyboardShouldPersistTaps="handled"
        showsVerticalScrollIndicator={false}
      >
        {/* Header */}
        <LinearGradient
          colors={['#3B82F6', '#1E40AF']}
          style={styles.header}
        >
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.goBack()}
            activeOpacity={0.7}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          
          <View style={styles.headerContent}>
            <Ionicons name="construct" size={40} color="white" />
            <Text style={styles.headerTitle}>Create Account</Text>
            <Text style={styles.headerSubtitle}>Join MotoMate today</Text>
          </View>
        </LinearGradient>

        {/* Form */}
        <View style={styles.formContainer}>
          <View style={styles.form}>
            {/* Profile Image Upload */}
            <View style={styles.imageUploadContainer}>
              <TouchableOpacity 
                style={styles.imageUploadButton} 
                onPress={pickImage}
                activeOpacity={0.7}
              >
                {selectedImage ? (
                  <Image 
                    source={{ uri: selectedImage }} 
                    style={styles.profileImage} 
                  />
                ) : (
                  <View style={styles.placeholderImage}>
                    <Ionicons name="camera" size={40} color="#6B7280" />
                    <Text style={styles.uploadText}>Add Profile Photo</Text>
                  </View>
                )}
              </TouchableOpacity>
            </View>

            {/* Username Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Username *</Text>
              <View style={[
                styles.inputWrapper,
                errors.username ? styles.inputError : null
              ]}>
                <Ionicons name="person-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Choose a username"
                  value={formData.username}
                  onChangeText={(value) => updateFormData('username', value)}
                  autoCapitalize="none"
                  autoCorrect={false}
                />
              </View>
              {errors.username && (
                <Text style={styles.errorText}>{errors.username}</Text>
              )}
            </View>

            {/* Email Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Email Address *</Text>
              <View style={[
                styles.inputWrapper,
                errors.email ? styles.inputError : null
              ]}>
                <Ionicons name="mail-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Enter your email"
                  value={formData.email}
                  onChangeText={(value) => updateFormData('email', value)}
                  autoCapitalize="none"
                  keyboardType="email-address"
                  autoCorrect={false}
                />
              </View>
              {errors.email && (
                <Text style={styles.errorText}>{errors.email}</Text>
              )}
            </View>

            {/* Full Name Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Full Name *</Text>
              <View style={[
                styles.inputWrapper,
                errors.name ? styles.inputError : null
              ]}>
                <Ionicons name="person-circle-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Enter your full name"
                  value={formData.name}
                  onChangeText={(value) => updateFormData('name', value)}
                  autoCapitalize="words"
                />
              </View>
              {errors.name && (
                <Text style={styles.errorText}>{errors.name}</Text>
              )}
            </View>

            {/* Phone Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Phone Number</Text>
              <View style={[
                styles.inputWrapper,
                errors.phone ? styles.inputError : null
              ]}>
                <Ionicons name="call-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Enter your phone number"
                  value={formData.phone}
                  onChangeText={(value) => updateFormData('phone', value)}
                  keyboardType="phone-pad"
                  maxLength={11}
                />
              </View>
              {errors.phone && (
                <Text style={styles.errorText}>{errors.phone}</Text>
              )}
            </View>

            {/* Address Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Address</Text>
              <View style={styles.inputWrapper}>
                <Ionicons name="location-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Enter your address"
                  value={formData.address}
                  onChangeText={(value) => updateFormData('address', value)}
                  autoCapitalize="words"
                />
              </View>
            </View>

            {/* Password Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Password *</Text>
              <View style={[
                styles.inputWrapper,
                errors.password ? styles.inputError : null
              ]}>
                <Ionicons name="lock-closed-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Create a password"
                  value={formData.password}
                  onChangeText={(value) => updateFormData('password', value)}
                  secureTextEntry={!showPassword}
                  autoCapitalize="none"
                />
                <TouchableOpacity
                  onPress={() => setShowPassword(!showPassword)}
                  style={styles.passwordToggle}
                  activeOpacity={0.7}
                >
                  <Ionicons 
                    name={showPassword ? "eye-off-outline" : "eye-outline"} 
                    size={20} 
                    color="#6B7280" 
                  />
                </TouchableOpacity>
              </View>
              {errors.password && (
                <Text style={styles.errorText}>{errors.password}</Text>
              )}
            </View>

            {/* Confirm Password Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Confirm Password *</Text>
              <View style={[
                styles.inputWrapper,
                errors.confirmPassword ? styles.inputError : null
              ]}>
                <Ionicons name="lock-closed-outline" size={20} color="#6B7280" style={styles.inputIcon} />
                <TextInput
                  style={styles.textInput}
                  placeholder="Confirm your password"
                  value={formData.confirmPassword}
                  onChangeText={(value) => updateFormData('confirmPassword', value)}
                  secureTextEntry={!showConfirmPassword}
                  autoCapitalize="none"
                />
                <TouchableOpacity
                  onPress={() => setShowConfirmPassword(!showConfirmPassword)}
                  style={styles.passwordToggle}
                  activeOpacity={0.7}
                >
                  <Ionicons 
                    name={showConfirmPassword ? "eye-off-outline" : "eye-outline"} 
                    size={20} 
                    color="#6B7280" 
                  />
                </TouchableOpacity>
              </View>
              {errors.confirmPassword && (
                <Text style={styles.errorText}>{errors.confirmPassword}</Text>
              )}
            </View>

            {/* Terms and Conditions */}
            <View style={styles.termsContainer}>
              <Text style={styles.termsText}>
                By creating an account, you agree to our{' '}
                <Text style={styles.termsLink}>Terms of Service</Text>
                {' '}and{' '}
                <Text style={styles.termsLink}>Privacy Policy</Text>
              </Text>
            </View>

            {/* Signup Button */}
            <TouchableOpacity
              style={[styles.signupButton, isLoading && styles.signupButtonDisabled]}
              onPress={handleSignup}
              disabled={isLoading}
              activeOpacity={0.8}
            >
              {isLoading ? (
                <ActivityIndicator color="white" size="small" />
              ) : (
                <>
                  <Text style={styles.signupButtonText}>Create Account</Text>
                  <Ionicons name="arrow-forward" size={20} color="white" />
                </>
              )}
            </TouchableOpacity>

            {/* Login Link */}
            <View style={styles.loginContainer}>
              <Text style={styles.loginText}>Already have an account? </Text>
              <TouchableOpacity
                onPress={() => navigation.navigate('Login')}
                activeOpacity={0.7}
              >
                <Text style={styles.loginLink}>Sign In</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  scrollContainer: {
    flexGrow: 1,
  },
  header: {
    paddingTop: 60,
    paddingBottom: 30,
    paddingHorizontal: 20,
    position: 'relative',
  },
  backButton: {
    position: 'absolute',
    top: 60,
    left: 20,
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerContent: {
    alignItems: 'center',
    marginTop: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    marginTop: 15,
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.8)',
    textAlign: 'center',
  },
  formContainer: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 30,
  },
  form: {
    gap: 20,
  },
  inputContainer: {
    gap: 8,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 12,
    paddingHorizontal: 16,
    minHeight: 52,
  },
  inputError: {
    borderColor: '#EF4444',
    backgroundColor: '#FEF2F2',
  },
  inputIcon: {
    marginRight: 12,
  },
  textInput: {
    flex: 1,
    fontSize: 16,
    color: '#111827',
  },
  passwordToggle: {
    padding: 4,
  },
  errorText: {
    fontSize: 14,
    color: '#EF4444',
    marginTop: 4,
  },
  termsContainer: {
    marginVertical: 10,
  },
  termsText: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 20,
  },
  termsLink: {
    color: '#3B82F6',
    fontWeight: '500',
  },
  signupButton: {
    backgroundColor: '#3B82F6',
    borderRadius: 12,
    paddingVertical: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    marginTop: 10,
  },
  signupButtonDisabled: {
    opacity: 0.7,
  },
  signupButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  loginContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 20,
  },
  loginText: {
    fontSize: 14,
    color: '#6B7280',
  },
  loginLink: {
    fontSize: 14,
    color: '#3B82F6',
    fontWeight: '600',
  },
  imageUploadContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  imageUploadButton: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
    overflow: 'hidden',
    borderWidth: 2,
    borderColor: '#D1D5DB',
    borderStyle: 'dashed',
  },
  profileImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  placeholderImage: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  uploadText: {
    marginTop: 8,
    color: '#6B7280',
    fontSize: 12,
    textAlign: 'center',
  },
});

export default SignupScreen;


================================================
File: src/screens/customer/VehiclesScreen.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  TextInput,
  Modal,
  RefreshControl,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from '../../context/AuthContext';
import { apiService } from '../../services/apiService';

interface Vehicle {
  vehicleId: number;
  userId: number;
  make: string;
  model: string;
  year: number;
  licensePlate: string;
  createdAt?: string;
  updatedAt?: string;
}

interface NewVehicleData {
  make: string;
  model: string;
  year: string;
  licensePlate: string;
}

const VehiclesScreen = () => {
  const { user } = useAuth();
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [addingVehicle, setAddingVehicle] = useState(false);
  const [newVehicle, setNewVehicle] = useState<NewVehicleData>({
    make: '',
    model: '',
    year: '',
    licensePlate: '',
  });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    fetchVehicles();
  }, []);

  const fetchVehicles = async () => {
    try {
      const response = await apiService.getVehicles();
      
      console.log('Vehicles API Response:', response);
      
      if (response.success) {
        const vehiclesData = Array.isArray(response.data) ? response.data : [];
        console.log('Vehicles data:', vehiclesData);
        setVehicles(vehiclesData);
      } else {
        console.error('Failed to fetch vehicles:', response.message);
        Alert.alert('Error', response.message || 'Failed to fetch vehicles');
      }
    } catch (error) {
      console.error('Error fetching vehicles:', error);
      Alert.alert('Error', 'An unexpected error occurred while fetching vehicles');
    } finally {
      setLoading(false);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await fetchVehicles();
    setRefreshing(false);
  };

  const validateForm = (): boolean => {
    const newErrors: { [key: string]: string } = {};

    if (!newVehicle.make.trim()) {
      newErrors.make = 'Make is required';
    }

    if (!newVehicle.model.trim()) {
      newErrors.model = 'Model is required';
    }

    if (!newVehicle.year.trim()) {
      newErrors.year = 'Year is required';
    } else {
      const year = parseInt(newVehicle.year);
      const currentYear = new Date().getFullYear();
      if (isNaN(year) || year < 1900 || year > currentYear + 1) {
        newErrors.year = `Year must be between 1900 and ${currentYear + 1}`;
      }
    }

    if (!newVehicle.licensePlate.trim()) {
      newErrors.licensePlate = 'License plate is required';
    } else if (newVehicle.licensePlate.length < 2) {
      newErrors.licensePlate = 'License plate is too short';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleAddVehicle = async () => {
    if (!validateForm()) {
      return;
    }

    setAddingVehicle(true);
    try {
      const vehicleData = {
        make: newVehicle.make.trim(),
        model: newVehicle.model.trim(),
        year: parseInt(newVehicle.year),
        licensePlate: newVehicle.licensePlate.trim().toUpperCase(),
      };

      console.log('Adding vehicle:', vehicleData);

      const response = await apiService.addVehicle(vehicleData);
      
      if (response.success) {
        // Refresh the vehicles list
        await fetchVehicles();
        setShowAddModal(false);
        setNewVehicle({ make: '', model: '', year: '', licensePlate: '' });
        setErrors({});
        Alert.alert('Success', 'Vehicle added successfully!');
      } else {
        Alert.alert('Error', response.message || 'Failed to add vehicle');
      }
    } catch (error) {
      console.error('Error adding vehicle:', error);
      Alert.alert('Error', 'Failed to add vehicle. Please try again.');
    } finally {
      setAddingVehicle(false);
    }
  };

  const handleDeleteVehicle = async (vehicleId: number, vehicleName: string) => {
    Alert.alert(
      'Delete Vehicle',
      `Are you sure you want to delete ${vehicleName}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            setLoading(true);
            try {
              const response = await apiService.deleteVehicle(vehicleId);
              
              if (response.success) {
                // Remove vehicle from local state
                setVehicles(vehicles.filter(v => v.vehicleId !== vehicleId));
                Alert.alert('Success', 'Vehicle deleted successfully!');
              } else {
                Alert.alert('Error', response.message || 'Failed to delete vehicle');
              }
            } catch (error) {
              console.error('Error deleting vehicle:', error);
              Alert.alert('Error', 'Failed to delete vehicle. Please try again.');
            } finally {
              setLoading(false);
            }
          },
        },
      ]
    );
  };

  const updateFormData = (field: keyof NewVehicleData, value: string) => {
    setNewVehicle(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const getVehicleName = (vehicle: Vehicle): string => {
    return `${vehicle.make} ${vehicle.model} ${vehicle.year}`;
  };

  const formatDate = (dateString?: string): string => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    } catch (error) {
      return 'Invalid Date';
    }
  };

  const renderVehicleItem = ({ item }: { item: Vehicle }) => (
    <View style={styles.vehicleCard}>
      <View style={styles.vehicleHeader}>
        <View style={styles.vehicleInfo}>
          <Ionicons name="car" size={24} color="#3B82F6" />
          <View>
            <Text style={styles.vehicleName}>{getVehicleName(item)}</Text>
            <Text style={styles.vehiclePlate}>Plate: {item.licensePlate}</Text>
          </View>
        </View>
        <TouchableOpacity
          style={styles.deleteButton}
          onPress={() => handleDeleteVehicle(item.vehicleId, getVehicleName(item))}
        >
          <Ionicons name="trash-outline" size={24} color="#EF4444" />
        </TouchableOpacity>
      </View>

      <View style={styles.vehicleDetails}>
        <View style={styles.detailItem}>
          <Text style={styles.detailLabel}>Make</Text>
          <Text style={styles.detailValue}>{item.make}</Text>
        </View>
        <View style={styles.detailItem}>
          <Text style={styles.detailLabel}>Model</Text>
          <Text style={styles.detailValue}>{item.model}</Text>
        </View>
        <View style={styles.detailItem}>
          <Text style={styles.detailLabel}>Year</Text>
          <Text style={styles.detailValue}>{item.year}</Text>
        </View>
      </View>

      {item.createdAt && (
        <View style={styles.vehicleFooter}>
          <Text style={styles.createdDate}>Added: {formatDate(item.createdAt)}</Text>
        </View>
      )}
    </View>
  );

  if (loading && !refreshing) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3B82F6" />
        <Text style={styles.loadingText}>Loading vehicles...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>My Vehicles</Text>
        <TouchableOpacity
          style={styles.addButton}
          onPress={() => setShowAddModal(true)}
        >
          <Ionicons name="add" size={24} color="#3B82F6" />
        </TouchableOpacity>
      </View>

      <FlatList
        data={vehicles}
        renderItem={renderVehicleItem}
        keyExtractor={(item) => item.vehicleId?.toString() || Math.random().toString()}
        contentContainerStyle={styles.listContainer}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Ionicons name="car" size={64} color="#D1D5DB" />
            <Text style={styles.emptyText}>No vehicles found</Text>
            <Text style={styles.emptySubtext}>Add your first vehicle to get started</Text>
            <TouchableOpacity 
              style={styles.addFirstVehicleButton}
              onPress={() => setShowAddModal(true)}
            >
              <Text style={styles.addFirstVehicleButtonText}>Add Vehicle</Text>
            </TouchableOpacity>
          </View>
        }
      />

      {/* Add Vehicle Modal */}
      <Modal
        visible={showAddModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowAddModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Add New Vehicle</Text>
              <TouchableOpacity
                onPress={() => {
                  setShowAddModal(false);
                  setNewVehicle({ make: '', model: '', year: '', licensePlate: '' });
                  setErrors({});
                }}
                style={styles.closeButton}
              >
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>

            <View style={styles.form}>
              {/* Make Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Make *</Text>
                <TextInput
                  style={[styles.input, errors.make && styles.inputError]}
                  placeholder="e.g., Toyota, Honda, BMW"
                  value={newVehicle.make}
                  onChangeText={(text) => updateFormData('make', text)}
                  autoCapitalize="words"
                />
                {errors.make && <Text style={styles.errorText}>{errors.make}</Text>}
              </View>

              {/* Model Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Model *</Text>
                <TextInput
                  style={[styles.input, errors.model && styles.inputError]}
                  placeholder="e.g., Camry, Civic, X5"
                  value={newVehicle.model}
                  onChangeText={(text) => updateFormData('model', text)}
                  autoCapitalize="words"
                />
                {errors.model && <Text style={styles.errorText}>{errors.model}</Text>}
              </View>

              {/* Year Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>Year *</Text>
                <TextInput
                  style={[styles.input, errors.year && styles.inputError]}
                  placeholder="e.g., 2020"
                  value={newVehicle.year}
                  onChangeText={(text) => updateFormData('year', text)}
                  keyboardType="numeric"
                  maxLength={4}
                />
                {errors.year && <Text style={styles.errorText}>{errors.year}</Text>}
              </View>

              {/* License Plate Input */}
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>License Plate *</Text>
                <TextInput
                  style={[styles.input, errors.licensePlate && styles.inputError]}
                  placeholder="e.g., ABC-123, XYZ789"
                  value={newVehicle.licensePlate}
                  onChangeText={(text) => updateFormData('licensePlate', text)}
                  autoCapitalize="characters"
                />
                {errors.licensePlate && <Text style={styles.errorText}>{errors.licensePlate}</Text>}
              </View>

              <TouchableOpacity
                style={[styles.submitButton, addingVehicle && styles.submitButtonDisabled]}
                onPress={handleAddVehicle}
                disabled={addingVehicle}
              >
                {addingVehicle ? (
                  <ActivityIndicator color="white" size="small" />
                ) : (
                  <Text style={styles.submitButtonText}>Add Vehicle</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

    
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6B7280',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  addButton: {
    padding: 8,
  },
  listContainer: {
    padding: 16,
  },
  vehicleCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  vehicleHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  vehicleInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    flex: 1,
  },
  vehicleName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  vehiclePlate: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },
  deleteButton: {
    padding: 8,
  },
  vehicleDetails: {
    flexDirection: 'row',
    gap: 16,
    flexWrap: 'wrap',
  },
  detailItem: {
    flex: 1,
    minWidth: 80,
  },
  detailLabel: {
    fontSize: 12,
    color: '#6B7280',
    marginBottom: 4,
  },
  detailValue: {
    fontSize: 14,
    color: '#1F2937',
    fontWeight: '500',
  },
  vehicleFooter: {
    marginTop: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
  },
  createdDate: {
    fontSize: 12,
    color: '#9CA3AF',
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 48,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#4B5563',
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 4,
    textAlign: 'center',
  },
  addFirstVehicleButton: {
    marginTop: 16,
    backgroundColor: '#3B82F6',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  addFirstVehicleButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1F2937',
  },
  closeButton: {
    padding: 8,
  },
  form: {
    gap: 16,
  },
  inputContainer: {
    gap: 8,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
  },
  input: {
    backgroundColor: '#F9FAFB',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    color: '#1F2937',
  },
  inputError: {
    borderColor: '#EF4444',
    backgroundColor: '#FEF2F2',
  },
  errorText: {
    fontSize: 12,
    color: '#EF4444',
    marginTop: 4,
  },
  submitButton: {
    backgroundColor: '#3B82F6',
    paddingVertical: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 8,
  },
  submitButtonDisabled: {
    opacity: 0.7,
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  debugContainer: {
    backgroundColor: '#FEF3C7',
    padding: 8,
    margin: 16,
    borderRadius: 8,
  },
  debugText: {
    fontSize: 12,
    color: '#92400E',
  },
});

export default VehiclesScreen;


================================================
File: src/screens/customer/NewOrderScreen/index.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  ActivityIndicator,
  Modal,
  FlatList,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from 'context/AuthContext';
import { apiService } from 'services/apiService';



// Interfaces
interface Vehicle {
  vehicleId: number;
  userId: number;
  make: string;
  model: string;
  year: number;
  licensePlate: string;
  createdAt?: string;
  updatedAt?: string;
}

interface Service {
  serviceId: number;
  serviceName: string;
  category: string;
  price: number;
  description?: string;
  subCategory?: string;
}

interface SelectedSubcategory {
  serviceId: number;
  serviceName: string;
  price: number;
  description?: string;
}

interface TimeSlotInfo {
  timeSlot: string;
  availableSlots: number;
  totalSlots: number;
}

const NewOrderScreen = () => {
  const { user } = useAuth();
  
  // Form state
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [initialLoading, setInitialLoading] = useState(true);
  
  // Data state
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [services, setServices] = useState<Service[]>([]);
  const [inspectionServices, setInspectionServices] = useState<Service[]>([]);
  const [timeSlots, setTimeSlots] = useState<TimeSlotInfo[]>([]);
  
  // Form selections
  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);
  const [selectedSubcategories, setSelectedSubcategories] = useState<SelectedSubcategory[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>('');
  const [includeService, setIncludeService] = useState(false);
  const [selectedService, setSelectedService] = useState<Service | null>(null);
  const [additionalServices, setAdditionalServices] = useState<Service[]>([]);
  const [notes, setNotes] = useState('');
  
  // Modal states
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showTimeSlotModal, setShowTimeSlotModal] = useState(false);
  const [showServiceModal, setShowServiceModal] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<'cash' | 'online' | null>(null);

  // Progress calculation
  const getProgress = () => {
    let progress = 0;
    if (selectedVehicle) progress += 20;
    if (selectedSubcategories.length > 0) progress += 20;
    if (selectedDate && selectedTimeSlot) progress += 20;
    if (includeService ? selectedService : true) progress += 20;
    if (notes || !includeService) progress += 20;
    return progress;
  };

  // Step titles
  const stepTitles = [
    'Select Vehicle',
    'Choose Inspections',
    'Schedule Appointment',
    'Additional Services',
    'Review & Submit'
  ];

  useEffect(() => {
    fetchInitialData();
  }, []);

  const fetchInitialData = async () => {
    try {
      setInitialLoading(true);
      
      const [vehiclesResponse, servicesResponse] = await Promise.all([
        apiService.getVehicles(),
        apiService.getServices()
      ]);

      if (vehiclesResponse.success) {
        setVehicles(vehiclesResponse.data || []);
      } else {
        Alert.alert('Error', vehiclesResponse.message || 'Failed to fetch vehicles');
      }

      if (servicesResponse.success) {
        const allServices = servicesResponse.data || [];
        
        // Separate inspection services from regular services
        const inspections = allServices.filter((service: Service) => 
          service.category.toLowerCase() === 'inspection'
        );
        const regularServices = allServices.filter((service: Service) => 
          service.category.toLowerCase() !== 'inspection'
        );
        
        setInspectionServices(inspections);
        setServices(regularServices);
      } else {
        Alert.alert('Error', servicesResponse.message || 'Failed to fetch services');
      }

      // Load time slots for today
      await fetchTimeSlots(new Date());
    } catch (error) {
      console.error('Error fetching initial data:', error);
      Alert.alert('Error', 'Failed to load data');
    } finally {
      setInitialLoading(false);
    }
  };

  const fetchTimeSlots = async (date: Date) => {
    try {
      // Mock time slots - replace with actual API call
      const mockTimeSlots: TimeSlotInfo[] = [
        { timeSlot: '09:00 AM - 11:00 AM', availableSlots: 2, totalSlots: 2 },
        { timeSlot: '11:00 AM - 01:00 PM', availableSlots: 1, totalSlots: 2 },
        { timeSlot: '02:00 PM - 04:00 PM', availableSlots: 2, totalSlots: 2 },
        { timeSlot: '04:00 PM - 06:00 PM', availableSlots: 0, totalSlots: 2 },
      ];
      
      setTimeSlots(mockTimeSlots);
    } catch (error) {
      console.error('Error fetching time slots:', error);
    }
  };

  const toggleSubcategorySelection = (service: Service) => {
    const isSelected = selectedSubcategories.some(
      item => item.serviceId === service.serviceId
    );

    if (isSelected) {
      setSelectedSubcategories(
        selectedSubcategories.filter(item => item.serviceId !== service.serviceId)
      );
    } else {
      setSelectedSubcategories([
        ...selectedSubcategories,
        {
          serviceId: service.serviceId,
          serviceName: service.serviceName,
          price: service.price,
          description: service.description
        }
      ]);
    }
  };

  const addAdditionalService = (service: Service) => {
    if (additionalServices.find(s => s.serviceId === service.serviceId)) {
      Alert.alert('Error', 'Service already added');
      return;
    }
    
    if (selectedService && selectedService.serviceId === service.serviceId) {
      Alert.alert('Error', 'This service is already selected as your main service');
      return;
    }
    
    setAdditionalServices([...additionalServices, service]);
    setShowServiceModal(false);
  };

  const removeAdditionalService = (serviceId: number) => {
    setAdditionalServices(additionalServices.filter(s => s.serviceId !== serviceId));
  };

  const calculateTotal = () => {
    let total = 0;
    
    // Add inspection costs
    total += selectedSubcategories.reduce((sum, sub) => sum + sub.price, 0);
    
    // Add main service cost
    if (includeService && selectedService) {
      total += selectedService.price;
    }
    
    // Add additional services cost
    total += additionalServices.reduce((sum, service) => sum + service.price, 0);
    
    return total;
  };

  const validateCurrentStep = () => {
    switch (currentStep) {
      case 0:
        return selectedVehicle !== null;
      case 1:
        return selectedSubcategories.length > 0;
      case 2:
        return selectedDate && selectedTimeSlot;
      case 3:
        return includeService ? selectedService !== null : true;
      case 4:
        return true;
      default:
        return false;
    }
  };

  const handleNext = () => {
    if (validateCurrentStep()) {
      if (currentStep < 4) {
        setCurrentStep(currentStep + 1);
      } else {
        // Show payment modal on final step
        setShowPaymentModal(true);
      }
    } else {
      Alert.alert('Error', 'Please complete all required fields');
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmitOrder = async (paymentMethod: 'cash' | 'online') => {
    if (selectedSubcategories.length === 0) {
      Alert.alert('Error', 'Please select at least one inspection');
      return;
    }

    setLoading(true);
    setShowPaymentModal(false);

    try {
      const primaryInspection = selectedSubcategories[0];
      const additionalSubcategoryIds = selectedSubcategories.slice(1).map(s => s.serviceId);
      const additionalServiceIds = additionalServices.map(s => s.serviceId);

      const orderData = {
        vehicleId: selectedVehicle!.vehicleId,
        inspectionTypeId: primaryInspection.serviceId,
        subCategory: primaryInspection.serviceName,
        serviceId: includeService && selectedService ? selectedService.serviceId : null,
        additionalServiceIds: [...additionalServiceIds, ...additionalSubcategoryIds],
        inspectionDate: selectedDate.toISOString(),
        timeSlot: selectedTimeSlot,
        notes: notes || '',
        paymentMethod: paymentMethod,
      };

      console.log('Creating order with data:', orderData);

      const response = await apiService.createOrder(orderData);
      
      if (response.success) {
        Alert.alert('Success', 'Your order has been placed successfully!', [
          { 
            text: 'OK', 
            onPress: () => {
              // Reset form and navigate back
              resetForm();
              // You might want to navigate to order details or dashboard here
            }
          }
        ]);
      } else {
        Alert.alert('Error', response.message || 'Failed to create order');
      }
    } catch (error) {
      console.error('Error creating order:', error);
      Alert.alert('Error', 'Failed to create order. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setCurrentStep(0);
    setSelectedVehicle(null);
    setSelectedSubcategories([]);
    setSelectedDate(new Date());
    setSelectedTimeSlot('');
    setIncludeService(false);
    setSelectedService(null);
    setAdditionalServices([]);
    setNotes('');
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  if (initialLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3B82F6" />
        <Text style={styles.loadingText}>Loading order form...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>New Service Order</Text>
        <View style={styles.progressContainer}>
          <Text style={styles.progressText}>
            Step {currentStep + 1} of {stepTitles.length}
          </Text>
          <View style={styles.progressBar}>
            <View style={[styles.progressFill, { width: `${getProgress()}%` }]} />
          </View>
        </View>
      </View>

      {/* Step Indicator */}
      <View style={styles.stepContainer}>
        <Text style={styles.stepTitle}>{stepTitles[currentStep]}</Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Step 0: Vehicle Selection */}
        {currentStep === 0 && (
          <View style={styles.stepContent}>
            <Text style={styles.sectionTitle}>Select Your Vehicle</Text>
            <Text style={styles.sectionDescription}>
              Choose the vehicle that needs service
            </Text>
            
            {vehicles.map((vehicle) => (
              <TouchableOpacity
                key={vehicle.vehicleId}
                style={[
                  styles.optionCard,
                  selectedVehicle?.vehicleId === vehicle.vehicleId && styles.selectedOption
                ]}
                onPress={() => setSelectedVehicle(vehicle)}
              >
                <Ionicons name="car" size={24} color="#3B82F6" />
                <View style={styles.optionDetails}>
                  <Text style={styles.optionTitle}>
                    {vehicle.year} {vehicle.make} {vehicle.model}
                  </Text>
                  <Text style={styles.optionSubtitle}>Plate: {vehicle.licensePlate}</Text>
                </View>
                {selectedVehicle?.vehicleId === vehicle.vehicleId && (
                  <Ionicons name="checkmark-circle" size={24} color="#3B82F6" />
                )}
              </TouchableOpacity>
            ))}
          </View>
        )}

        {/* Step 1: Inspection Selection */}
        {currentStep === 1 && (
          <View style={styles.stepContent}>
            <Text style={styles.sectionTitle}>Choose Inspection Types</Text>
            <Text style={styles.sectionDescription}>
              Select the inspection services you need
            </Text>
            
            {inspectionServices.map((service) => {
              const isSelected = selectedSubcategories.some(
                item => item.serviceId === service.serviceId
              );
              
              return (
                <TouchableOpacity
                  key={service.serviceId}
                  style={[
                    styles.inspectionCard,
                    isSelected && styles.selectedInspection
                  ]}
                  onPress={() => toggleSubcategorySelection(service)}
                >
                  <View style={styles.inspectionHeader}>
                    <View style={styles.inspectionInfo}>
                      <View style={[
                        styles.checkbox,
                        isSelected && styles.checkedBox
                      ]}>
                        {isSelected && <Ionicons name="checkmark" size={16} color="white" />}
                      </View>
                      <View style={styles.inspectionDetails}>
                        <Text style={styles.inspectionTitle}>{service.serviceName}</Text>
                        {service.description && (
                          <Text style={styles.inspectionDescription}>{service.description}</Text>
                        )}
                      </View>
                    </View>
                    <View style={[styles.priceBadge, isSelected && styles.selectedPriceBadge]}>
                      <Text style={[styles.priceText, isSelected && styles.selectedPriceText]}>
                        PKR {service.price}
                      </Text>
                    </View>
                  </View>
                </TouchableOpacity>
              );
            })}

            {/* Selected Inspections Summary */}
            {selectedSubcategories.length > 0 && (
              <View style={styles.summaryCard}>
                <Text style={styles.summaryTitle}>Selected Inspections</Text>
                {selectedSubcategories.map((sub) => (
                  <View key={sub.serviceId} style={styles.summaryItem}>
                    <Text style={styles.summaryItemText}>{sub.serviceName}</Text>
                    <Text style={styles.summaryItemPrice}>PKR {sub.price}</Text>
                  </View>
                ))}
              </View>
            )}
          </View>
        )}

        {/* Step 2: Schedule Appointment */}
        {currentStep === 2 && (
          <View style={styles.stepContent}>
            <Text style={styles.sectionTitle}>Schedule Your Appointment</Text>
            <Text style={styles.sectionDescription}>
              Choose a convenient date and time
            </Text>

            {/* Date Selection */}
            <TouchableOpacity
              style={styles.dateTimeCard}
              onPress={() => setShowDatePicker(true)}
            >
              <Ionicons name="calendar" size={24} color="#3B82F6" />
              <View style={styles.dateTimeInfo}>
                <Text style={styles.dateTimeLabel}>Date</Text>
                <Text style={styles.dateTimeValue}>{formatDate(selectedDate)}</Text>
              </View>
              <Ionicons name="chevron-forward" size={20} color="#9CA3AF" />
            </TouchableOpacity>

            {/* Time Slot Selection */}
            <TouchableOpacity
              style={styles.dateTimeCard}
              onPress={() => setShowTimeSlotModal(true)}
            >
              <Ionicons name="time" size={24} color="#3B82F6" />
              <View style={styles.dateTimeInfo}>
                <Text style={styles.dateTimeLabel}>Time Slot</Text>
                <Text style={styles.dateTimeValue}>
                  {selectedTimeSlot || 'Select a time slot'}
                </Text>
              </View>
              <Ionicons name="chevron-forward" size={20} color="#9CA3AF" />
            </TouchableOpacity>
          </View>
        )}

        {/* Step 3: Additional Services */}
        {currentStep === 3 && (
          <View style={styles.stepContent}>
            <Text style={styles.sectionTitle}>Additional Services</Text>
            <Text style={styles.sectionDescription}>
              Add a service now or wait for inspection results
            </Text>

            {/* Include Service Toggle */}
            <TouchableOpacity
              style={styles.toggleCard}
              onPress={() => setIncludeService(!includeService)}
            >
              <View style={styles.toggleInfo}>
                <Text style={styles.toggleTitle}>Add a service to your order</Text>
                <Text style={styles.toggleDescription}>
                  You can add a service now or wait for inspection results
                </Text>
              </View>
              <View style={[styles.toggle, includeService && styles.toggleActive]}>
                {includeService && <View style={styles.toggleDot} />}
              </View>
            </TouchableOpacity>

            {/* Service Selection */}
            {includeService && (
              <>
                <TouchableOpacity
                  style={styles.serviceSelectCard}
                  onPress={() => setShowServiceModal(true)}
                >
                  <Ionicons name="construct" size={24} color="#3B82F6" />
                  <View style={styles.serviceSelectInfo}>
                    <Text style={styles.serviceSelectLabel}>Primary Service</Text>
                    <Text style={styles.serviceSelectValue}>
                      {selectedService ? selectedService.serviceName : 'Select a service'}
                    </Text>
                  </View>
                  <Ionicons name="chevron-forward" size={20} color="#9CA3AF" />
                </TouchableOpacity>

                {/* Additional Services */}
                {additionalServices.length > 0 && (
                  <View style={styles.additionalServicesCard}>
                    <Text style={styles.additionalServicesTitle}>Additional Services</Text>
                    {additionalServices.map((service) => (
                      <View key={service.serviceId} style={styles.additionalServiceItem}>
                        <Text style={styles.additionalServiceName}>{service.serviceName}</Text>
                        <View style={styles.additionalServiceActions}>
                          <Text style={styles.additionalServicePrice}>PKR {service.price}</Text>
                          <TouchableOpacity
                            onPress={() => removeAdditionalService(service.serviceId)}
                          >
                            <Ionicons name="close-circle" size={20} color="#EF4444" />
                          </TouchableOpacity>
                        </View>
                      </View>
                    ))}
                  </View>
                )}
              </>
            )}

            {/* Notes */}
            <View style={styles.notesContainer}>
              <Text style={styles.notesLabel}>Additional Notes</Text>
              <TextInput
                style={styles.notesInput}
                placeholder="Any specific concerns or requests?"
                value={notes}
                onChangeText={setNotes}
                multiline
                numberOfLines={4}
                textAlignVertical="top"
              />
            </View>
          </View>
        )}

        {/* Step 4: Review & Submit */}
        {currentStep === 4 && (
          <View style={styles.stepContent}>
            <Text style={styles.sectionTitle}>Order Summary</Text>
            <Text style={styles.sectionDescription}>
              Review your order before submitting
            </Text>

            {/* Vehicle Summary */}
            <View style={styles.reviewCard}>
              <Text style={styles.reviewCardTitle}>Vehicle</Text>
              <Text style={styles.reviewCardValue}>
                {selectedVehicle?.year} {selectedVehicle?.make} {selectedVehicle?.model}
              </Text>
            </View>

            {/* Inspections Summary */}
            <View style={styles.reviewCard}>
              <Text style={styles.reviewCardTitle}>Inspections</Text>
              {selectedSubcategories.map((sub) => (
                <View key={sub.serviceId} style={styles.reviewItem}>
                  <Text style={styles.reviewItemName}>{sub.serviceName}</Text>
                  <Text style={styles.reviewItemPrice}>PKR {sub.price}</Text>
                </View>
              ))}
            </View>

            {/* Appointment Summary */}
            <View style={styles.reviewCard}>
              <Text style={styles.reviewCardTitle}>Appointment</Text>
              <Text style={styles.reviewCardValue}>{formatDate(selectedDate)}</Text>
              <Text style={styles.reviewCardValue}>{selectedTimeSlot}</Text>
            </View>

            {/* Services Summary */}
            {(selectedService || additionalServices.length > 0) && (
              <View style={styles.reviewCard}>
                <Text style={styles.reviewCardTitle}>Services</Text>
                {selectedService && (
                  <View style={styles.reviewItem}>
                    <Text style={styles.reviewItemName}>{selectedService.serviceName}</Text>
                    <Text style={styles.reviewItemPrice}>PKR {selectedService.price}</Text>
                  </View>
                )}
                {additionalServices.map((service) => (
                  <View key={service.serviceId} style={styles.reviewItem}>
                    <Text style={styles.reviewItemName}>{service.serviceName}</Text>
                    <Text style={styles.reviewItemPrice}>PKR {service.price}</Text>
                  </View>
                ))}
              </View>
            )}

            {/* Total */}
            <View style={styles.totalCard}>
              <Text style={styles.totalLabel}>Total Amount</Text>
              <Text style={styles.totalAmount}>PKR {calculateTotal()}</Text>
            </View>
          </View>
        )}
      </ScrollView>

      {/* Navigation Buttons */}
      <View style={styles.navigationContainer}>
        {currentStep > 0 && (
          <TouchableOpacity style={styles.backButton} onPress={handleBack}>
            <Ionicons name="arrow-back" size={20} color="#6B7280" />
            <Text style={styles.backButtonText}>Back</Text>
          </TouchableOpacity>
        )}
        
        <TouchableOpacity
          style={[
            styles.nextButton,
            !validateCurrentStep() && styles.nextButtonDisabled,
            currentStep === 0 && styles.nextButtonFull
          ]}
          onPress={handleNext}
          disabled={!validateCurrentStep()}
        >
          <Text style={styles.nextButtonText}>
            {currentStep === 4 ? 'Place Order' : 'Continue'}
          </Text>
          {currentStep < 4 && <Ionicons name="arrow-forward" size={20} color="white" />}
        </TouchableOpacity>
      </View>

      {/* Time Slot Modal */}
      <Modal
        visible={showTimeSlotModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowTimeSlotModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Select Time Slot</Text>
              <TouchableOpacity onPress={() => setShowTimeSlotModal(false)}>
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.modalBody}>
              {timeSlots.map((slot) => (
                <TouchableOpacity
                  key={slot.timeSlot}
                  style={[
                    styles.timeSlotCard,
                    slot.availableSlots === 0 && styles.timeSlotDisabled
                  ]}
                  onPress={() => {
                    if (slot.availableSlots > 0) {
                      setSelectedTimeSlot(slot.timeSlot);
                      setShowTimeSlotModal(false);
                    }
                  }}
                  disabled={slot.availableSlots === 0}
                >
                  <Text style={[
                    styles.timeSlotText,
                    slot.availableSlots === 0 && styles.timeSlotTextDisabled
                  ]}>
                    {slot.timeSlot}
                  </Text>
                  <View style={[
                    styles.availabilityBadge,
                    { backgroundColor: slot.availableSlots === 0 ? '#EF4444' : 
                                      slot.availableSlots === 1 ? '#F59E0B' : '#10B981' }
                  ]}>
                    <Text style={styles.availabilityText}>
                      {slot.availableSlots}/{slot.totalSlots}
                    </Text>
                  </View>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </View>
      </Modal>

      {/* Service Selection Modal */}
      <Modal
        visible={showServiceModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowServiceModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Select Service</Text>
              <TouchableOpacity onPress={() => setShowServiceModal(false)}>
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.modalBody}>
              {services.map((service) => (
                <TouchableOpacity
                  key={service.serviceId}
                  style={styles.serviceModalCard}
                  onPress={() => {
                    setSelectedService(service);
                    setShowServiceModal(false);
                  }}
                >
                  <View style={styles.serviceModalInfo}>
                    <Text style={styles.serviceModalName}>{service.serviceName}</Text>
                    {service.description && (
                      <Text style={styles.serviceModalDescription}>{service.description}</Text>
                    )}
                  </View>
                  <Text style={styles.serviceModalPrice}>PKR {service.price}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        </View>
      </Modal>

      {/* Payment Method Modal */}
      <Modal
        visible={showPaymentModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowPaymentModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Select Payment Method</Text>
              <TouchableOpacity onPress={() => setShowPaymentModal(false)}>
                <Ionicons name="close" size={24} color="#6B7280" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.paymentOptions}>
              <TouchableOpacity
                style={[
                  styles.paymentOption,
                  selectedPaymentMethod === 'cash' && styles.selectedPaymentOption
                ]}
                onPress={() => setSelectedPaymentMethod('cash')}
              >
                <Ionicons name="wallet" size={24} color="#3B82F6" />
                <View style={styles.paymentOptionInfo}>
                  <Text style={styles.paymentOptionTitle}>Cash Payment</Text>
                  <Text style={styles.paymentOptionDescription}>Pay at the workshop</Text>
                </View>
                {selectedPaymentMethod === 'cash' && (
                  <Ionicons name="checkmark-circle" size={24} color="#3B82F6" />
                )}
              </TouchableOpacity>

              <TouchableOpacity
                style={[
                  styles.paymentOption,
                  selectedPaymentMethod === 'online' && styles.selectedPaymentOption
                ]}
                onPress={() => setSelectedPaymentMethod('online')}
              >
                <Ionicons name="card" size={24} color="#3B82F6" />
                <View style={styles.paymentOptionInfo}>
                  <Text style={styles.paymentOptionTitle}>Online Payment</Text>
                  <Text style={styles.paymentOptionDescription}>Pay now with card</Text>
                </View>
                {selectedPaymentMethod === 'online' && (
                  <Ionicons name="checkmark-circle" size={24} color="#3B82F6" />
                )}
              </TouchableOpacity>
            </View>

            <TouchableOpacity
              style={[
                styles.confirmPaymentButton,
                !selectedPaymentMethod && styles.confirmPaymentButtonDisabled,
                loading && styles.confirmPaymentButtonDisabled
              ]}
              onPress={() => selectedPaymentMethod && handleSubmitOrder(selectedPaymentMethod)}
              disabled={!selectedPaymentMethod || loading}
            >
              {loading ? (
                <ActivityIndicator color="white" size="small" />
              ) : (
                <>
                  <Text style={styles.confirmPaymentButtonText}>Confirm Order</Text>
                  <Ionicons name="checkmark" size={20} color="white" />
                </>
              )}
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6B7280',
  },
  header: {
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 16,
  },
  progressContainer: {
    gap: 8,
  },
  progressText: {
    fontSize: 14,
    color: '#6B7280',
  },
  progressBar: {
    height: 4,
    backgroundColor: '#E5E7EB',
    borderRadius: 2,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#3B82F6',
    borderRadius: 2,
  },
  stepContainer: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  stepTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
  },
  content: {
    flex: 1,
  },
  stepContent: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 8,
  },
  sectionDescription: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 24,
  },
  optionCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginBottom: 12,
    gap: 12,
  },
  selectedOption: {
    borderColor: '#3B82F6',
    backgroundColor: '#EFF6FF',
  },
  optionDetails: {
    flex: 1,
  },
  optionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  optionSubtitle: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },
  inspectionCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginBottom: 12,
    overflow: 'hidden',
  },
  selectedInspection: {
    borderColor: '#3B82F6',
    backgroundColor: '#EFF6FF',
  },
  inspectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
  },
  inspectionInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
    gap: 12,
  },
  checkbox: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: '#D1D5DB',
    alignItems: 'center',
    justifyContent: 'center',
  },
  checkedBox: {
    backgroundColor: '#3B82F6',
    borderColor: '#3B82F6',
  },
  inspectionDetails: {
    flex: 1,
  },
  inspectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  inspectionDescription: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },
  priceBadge: {
    backgroundColor: '#F3F4F6',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  selectedPriceBadge: {
    backgroundColor: '#3B82F6',
  },
  priceText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
  },
  selectedPriceText: {
    color: '#FFFFFF',
  },
  summaryCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    padding: 16,
    marginTop: 16,
  },
  summaryTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 12,
  },
  summaryItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  summaryItemText: {
    fontSize: 14,
    color: '#374151',
  },
  summaryItemPrice: {
    fontSize: 14,
    fontWeight: '600',
    color: '#059669',
  },
  dateTimeCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginBottom: 12,
    gap: 12,
  },
  dateTimeInfo: {
    flex: 1,
  },
  dateTimeLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  dateTimeValue: {
    fontSize: 16,
    fontWeight: '500',
    color: '#1F2937',
    marginTop: 2,
  },
  toggleCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginBottom: 16,
  },
  toggleInfo: {
    flex: 1,
  },
  toggleTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  toggleDescription: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },
  toggle: {
    width: 48,
    height: 28,
    borderRadius: 14,
    backgroundColor: '#D1D5DB',
    padding: 2,
    justifyContent: 'center',
  },
  toggleActive: {
    backgroundColor: '#3B82F6',
    alignItems: 'flex-end',
  },
  toggleDot: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#FFFFFF',
  },
  serviceSelectCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginBottom: 16,
    gap: 12,
  },
  serviceSelectInfo: {
    flex: 1,
  },
  serviceSelectLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  serviceSelectValue: {
    fontSize: 16,
    fontWeight: '500',
    color: '#1F2937',
    marginTop: 2,
  },
  additionalServicesCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    padding: 16,
    marginBottom: 16,
  },
  additionalServicesTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 12,
  },
  additionalServiceItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  additionalServiceName: {
    fontSize: 14,
    color: '#374151',
    flex: 1,
  },
  additionalServiceActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  additionalServicePrice: {
    fontSize: 14,
    fontWeight: '600',
    color: '#059669',
  },
  notesContainer: {
    marginTop: 16,
  },
  notesLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  notesInput: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E5E7EB',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: '#1F2937',
    minHeight: 100,
    textAlignVertical: 'top',
  },
  reviewCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    padding: 16,
    marginBottom: 16,
  },
  reviewCardTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  reviewCardValue: {
    fontSize: 14,
    color: '#374151',
    marginBottom: 4,
  },
  reviewItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 4,
  },
  reviewItemName: {
    fontSize: 14,
    color: '#374151',
    flex: 1,
  },
  reviewItemPrice: {
    fontSize: 14,
    fontWeight: '600',
    color: '#059669',
  },
  totalCard: {
    backgroundColor: '#3B82F6',
    borderRadius: 12,
    padding: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  totalLabel: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  totalAmount: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  navigationContainer: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
    gap: 12,
  },
  backButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#D1D5DB',
    gap: 8,
  },
  backButtonText: {
    fontSize: 16,
    color: '#6B7280',
    fontWeight: '500',
  },
  nextButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    backgroundColor: '#3B82F6',
    borderRadius: 8,
    gap: 8,
  },
  nextButtonFull: {
    flex: 1,
  },
  nextButtonDisabled: {
    backgroundColor: '#9CA3AF',
  },
  nextButtonText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '600',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
  },
  modalBody: {
    padding: 20,
  },
  timeSlotCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  timeSlotDisabled: {
    opacity: 0.5,
  },
  timeSlotText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#1F2937',
  },
  timeSlotTextDisabled: {
    color: '#9CA3AF',
  },
  availabilityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  availabilityText: {
    fontSize: 12,
    color: '#FFFFFF',
    fontWeight: '600',
  },
  serviceModalCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  serviceModalInfo: {
    flex: 1,
    marginRight: 12,
  },
  serviceModalName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#1F2937',
  },
  serviceModalDescription: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },
  serviceModalPrice: {
    fontSize: 16,
    fontWeight: '600',
    color: '#059669',
  },
  paymentOptions: {
    padding: 20,
    gap: 16,
  },
  paymentOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    gap: 12,
  },
  selectedPaymentOption: {
    borderColor: '#3B82F6',
    backgroundColor: '#EFF6FF',
  },
  paymentOptionInfo: {
    flex: 1,
  },
  paymentOptionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  paymentOptionDescription: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },
  confirmPaymentButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#3B82F6',
    margin: 20,
    paddingVertical: 16,
    borderRadius: 12,
    gap: 8,
  },
  confirmPaymentButtonDisabled: {
    backgroundColor: '#9CA3AF',
  },
  confirmPaymentButtonText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '600',
  },
});

export default NewOrderScreen;


================================================
File: src/screens/customer/OrderHistoryScreen/[orderId].tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  RefreshControl,
  Dimensions,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from 'context/AuthContext';
import { apiService } from 'services/apiService';
import { useLocalSearchParams, useRouter } from 'expo-router';



interface OrderDetails {
  orderId: number;
  userId: number;
  vehicleId: number;
  serviceId?: number;
  includesInspection: boolean;
  orderDate: string;
  status: string;
  totalAmount: number;
  notes?: string;
  invoiceStatus?: string;
  invoiceId?: number;
  user?: any;
  vehicle?: any;
  service?: any;
  inspection?: any;
  additionalServices?: any[];
}

interface OrderDetailsScreenProps {
  route: {
    params: {
      orderId: number;
    };
  };
  navigation: any;
}
const OrderDetailsScreen: React.FC = () => {
  const params = useLocalSearchParams();
  const router = useRouter();
  const orderId = params.orderId as string;
  const { user } = useAuth();
  
  const orderIdNumber = parseInt(orderId || '0', 10);

  const [order, setOrder] = useState<OrderDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'details' | 'inspection' | 'invoice'>('details');
  const [invoice, setInvoice] = useState<any>(null);
  const [loadingInvoice, setLoadingInvoice] = useState(false);

  const screenWidth = Dimensions.get('window').width;

  

  useEffect(() => {
    fetchOrderDetails();
  }, [orderId]);

  const fetchOrderDetails = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await apiService.getOrderDetails(orderIdNumber);

      if (response.success) {
        setOrder(response.data);
        
        // If order is completed, check for invoice
        if (response.data.status.toLowerCase() === 'completed') {
          checkForInvoice(response.data.orderId);
        }
      } else {
        setError(response.message || 'Failed to fetch order details');
      }
    } catch (error) {
      console.error('Error fetching order details:', error);
      setError('An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  };

  const checkForInvoice = async (orderId: number) => {
    try {
      setLoadingInvoice(true);
      // Assuming you have an invoice API endpoint
      const response = await apiService.getInvoiceById(orderId.toString());
      
      if (response.success) {
        setInvoice(response.data);
      }
    } catch (error) {
      console.error('Error checking for invoice:', error);
    } finally {
      setLoadingInvoice(false);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await fetchOrderDetails();
    setRefreshing(false);
  };

  const formatDate = (dateString?: string): string => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });
    } catch (e) {
      return 'Invalid date';
    }
  };

  const formatCurrency = (amount: number | string): string => {
    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
    return `PKR ${numAmount?.toFixed(2) || '0.00'}`;
  };

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return '#10B981';
      case 'in progress':
      case 'inprogress':
        return '#3B82F6';
      case 'pending':
        return '#F59E0B';
      case 'cancelled':
        return '#EF4444';
      case 'paid':
        return '#10B981';
      case 'issued':
        return '#3B82F6';
      case 'overdue':
        return '#EF4444';
      default:
        return '#6B7280';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return 'checkmark-circle';
      case 'pending':
        return 'time';
      case 'cancelled':
        return 'close-circle';
      case 'in progress':
      case 'inprogress':
        return 'play-circle';
      case 'paid':
        return 'card';
      case 'issued':
        return 'document-text';
      case 'overdue':
        return 'warning';
      default:
        return 'ellipse-outline';
    }
  };

  const handlePayInvoice = () => {
    if (invoice?.invoice?.invoiceId) {
      // Navigate to payment screen
    
    }
  };

  const handlePrintInvoice = () => {
    Alert.alert('Print Invoice', 'Print functionality will be implemented soon');
  };

  const renderTabButton = (
    tab: 'details' | 'inspection' | 'invoice',
    title: string,
    icon: string,
    isVisible: boolean = true
  ) => {
    if (!isVisible) return null;

    return (
      <TouchableOpacity
        style={[
          styles.tabButton,
          activeTab === tab && styles.activeTabButton,
          { width: (screenWidth - 48) / (order?.includesInspection && invoice ? 3 : order?.includesInspection || invoice ? 2 : 1) }
        ]}
        onPress={() => setActiveTab(tab)}
      >
        <Ionicons
          name={icon as any}
          size={18}
          color={activeTab === tab ? '#3B82F6' : '#6B7280'}
        />
        <Text style={[
          styles.tabButtonText,
          activeTab === tab && styles.activeTabButtonText
        ]}>
          {title}
        </Text>
      </TouchableOpacity>
    );
  };

  const renderDetailsTab = () => (
    <View style={styles.tabContent}>
      {/* Vehicle Information */}
      <View style={styles.sectionCard}>
        <View style={styles.sectionHeader}>
          <Ionicons name="car" size={20} color="#3B82F6" />
          <Text style={styles.sectionTitle}>Vehicle Information</Text>
        </View>
        {order?.vehicle && (
          <View style={styles.sectionContent}>
            <View style={styles.vehicleHeader}>
              <View style={styles.vehicleIconContainer}>
                <Ionicons name="car-sport" size={24} color="#3B82F6" />
              </View>
              <View style={styles.vehicleInfo}>
                <Text style={styles.vehicleTitle}>
                  {order.vehicle.make} {order.vehicle.model}
                </Text>
                <View style={styles.vehicleBadges}>
                  <View style={styles.badge}>
                    <Text style={styles.badgeText}>{order.vehicle.year}</Text>
                  </View>
                  <View style={styles.badge}>
                    <Text style={styles.badgeText}>{order.vehicle.licensePlate}</Text>
                  </View>
                </View>
              </View>
            </View>
            <View style={styles.detailRows}>
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Registration No.</Text>
                <Text style={styles.detailValue}>{order.vehicle.licensePlate}</Text>
              </View>
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Model Year</Text>
                <Text style={styles.detailValue}>{order.vehicle.year}</Text>
              </View>
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Vehicle ID</Text>
                <Text style={styles.detailValue}>{order.vehicleId}</Text>
              </View>
            </View>
          </View>
        )}
      </View>

      {/* Service Information */}
      <View style={styles.sectionCard}>
        <View style={styles.sectionHeader}>
          <Ionicons name="construct" size={20} color="#3B82F6" />
          <Text style={styles.sectionTitle}>Service Information</Text>
        </View>
        <View style={styles.sectionContent}>
          {order?.service && (
            <View style={styles.serviceItem}>
              <View style={styles.serviceHeader}>
                <View style={styles.serviceIconContainer}>
                  <Ionicons 
                    name={order.service.category?.toLowerCase() === 'inspection' ? 'shield-checkmark' : 'construct'} 
                    size={20} 
                    color="#3B82F6" 
                  />
                </View>
                <View style={styles.serviceInfo}>
                  <Text style={styles.serviceTitle}>{order.service.serviceName}</Text>
                  <Text style={styles.serviceDescription}>
                    {order.service.description || 'No description available'}
                  </Text>
                </View>
              </View>
              <View style={styles.serviceDetails}>
                <View style={styles.serviceDetailRow}>
                  <Text style={styles.detailLabel}>Category</Text>
                  <View style={[styles.statusBadge, { backgroundColor: '#E0E7FF' }]}>
                    <Text style={[styles.statusText, { color: '#3730A3' }]}>
                      {order.service.category}
                    </Text>
                  </View>
                </View>
                <View style={styles.serviceDetailRow}>
                  <Text style={styles.detailLabel}>Price</Text>
                  <Text style={styles.detailValue}>
                    {formatCurrency(order.service.price || 0)}
                  </Text>
                </View>
                {order.includesInspection && (
                  <View style={styles.serviceDetailRow}>
                    <Text style={styles.detailLabel}>Includes Inspection</Text>
                    <View style={[styles.statusBadge, { backgroundColor: '#DBEAFE' }]}>
                      <Ionicons name="shield-checkmark" size={12} color="#1E40AF" />
                      <Text style={[styles.statusText, { color: '#1E40AF' }]}>Yes</Text>
                    </View>
                  </View>
                )}
              </View>
            </View>
          )}
        </View>
      </View>

      {/* Additional Services */}
      {order?.additionalServices && order.additionalServices.length > 0 && (
        <View style={styles.sectionCard}>
          <View style={styles.sectionHeader}>
            <Ionicons name="list" size={20} color="#3B82F6" />
            <Text style={styles.sectionTitle}>Additional Services</Text>
          </View>
          <View style={styles.sectionContent}>
            {order.additionalServices.map((service: any, index: number) => (
              <View key={service.serviceId || index} style={styles.additionalServiceItem}>
                <View style={styles.additionalServiceHeader}>
                  <Text style={styles.additionalServiceTitle}>{service.serviceName}</Text>
                  <Text style={styles.additionalServicePrice}>
                    {formatCurrency(service.price || 0)}
                  </Text>
                </View>
                <Text style={styles.additionalServiceDescription}>
                  {service.description || 'No description available'}
                </Text>
                <View style={[styles.statusBadge, { backgroundColor: '#F3F4F6', alignSelf: 'flex-start' }]}>
                  <Text style={[styles.statusText, { color: '#374151' }]}>
                    {service.category}
                  </Text>
                </View>
              </View>
            ))}
          </View>
        </View>
      )}

      {/* Payment Summary */}
      <View style={styles.sectionCard}>
        <View style={styles.sectionHeader}>
          <Ionicons name="card" size={20} color="#3B82F6" />
          <Text style={styles.sectionTitle}>Payment Summary</Text>
        </View>
        <View style={styles.sectionContent}>
          <View style={styles.paymentSummary}>
            <View style={styles.paymentRow}>
              <Text style={styles.paymentLabel}>Main Service</Text>
              <Text style={styles.paymentValue}>
                {formatCurrency(order?.service?.price || 0)}
              </Text>
            </View>
            
            {order?.includesInspection && order?.inspection?.price && (
              <View style={styles.paymentRow}>
                <Text style={styles.paymentLabel}>Inspection Fee</Text>
                <Text style={styles.paymentValue}>
                  {formatCurrency(order.inspection.price)}
                </Text>
              </View>
            )}

            {order?.additionalServices && order.additionalServices.length > 0 && (
              <View style={styles.paymentRow}>
                <Text style={styles.paymentLabel}>Additional Services</Text>
                <Text style={styles.paymentValue}>
                  {formatCurrency(
                    order.additionalServices.reduce(
                      (sum: number, service: any) => sum + (parseFloat(service.price) || 0),
                      0
                    )
                  )}
                </Text>
              </View>
            )}

            <View style={[styles.paymentRow, styles.totalRow]}>
              <Text style={styles.totalLabel}>Total Amount</Text>
              <Text style={styles.totalValue}>
                {formatCurrency(order?.totalAmount || 0)}
              </Text>
            </View>

            {invoice && (
              <View style={styles.paymentStatusSection}>
                <View style={styles.paymentRow}>
                  <Text style={styles.paymentLabel}>Payment Status</Text>
                  <View style={[
                    styles.statusBadge,
                    { backgroundColor: getStatusColor(invoice.invoice.status) + '20' }
                  ]}>
                    <Ionicons
                      name={getStatusIcon(invoice.invoice.status) as any}
                      size={12}
                      color={getStatusColor(invoice.invoice.status)}
                    />
                    <Text style={[
                      styles.statusText,
                      { color: getStatusColor(invoice.invoice.status) }
                    ]}>
                      {invoice.invoice.status}
                    </Text>
                  </View>
                </View>

                {invoice.invoice.status !== 'paid' && (
                  <TouchableOpacity
                    style={styles.payButton}
                    onPress={handlePayInvoice}
                  >
                    <Ionicons name="card" size={20} color="#FFFFFF" />
                    <Text style={styles.payButtonText}>Pay Now</Text>
                  </TouchableOpacity>
                )}
              </View>
            )}
          </View>
        </View>
      </View>

      {/* Notes */}
      {order?.notes && (
        <View style={styles.sectionCard}>
          <View style={styles.sectionHeader}>
            <Ionicons name="document-text" size={20} color="#3B82F6" />
            <Text style={styles.sectionTitle}>Order Notes</Text>
          </View>
          <View style={styles.sectionContent}>
            <Text style={styles.notesText}>{order.notes}</Text>
          </View>
        </View>
      )}
    </View>
  );

  const renderInspectionTab = () => (
    <View style={styles.tabContent}>
      {order?.inspection ? (
        <>
          {/* Inspection Schedule Info */}
          <View style={styles.inspectionScheduleCard}>
            <View style={styles.scheduleRow}>
              <View style={styles.scheduleItem}>
                <View style={styles.scheduleIconContainer}>
                  <Ionicons name="calendar" size={20} color="#3B82F6" />
                </View>
                <View>
                  <Text style={styles.scheduleLabel}>Inspection Date</Text>
                  <Text style={styles.scheduleValue}>
                    {formatDate(order.inspection.scheduledDate)}
                  </Text>
                </View>
              </View>
              <View style={styles.scheduleItem}>
                <View style={styles.scheduleIconContainer}>
                  <Ionicons name="time" size={20} color="#3B82F6" />
                </View>
                <View>
                  <Text style={styles.scheduleLabel}>Time Slot</Text>
                  <Text style={styles.scheduleValue}>
                    {order.inspection.timeSlot || 'Not specified'}
                  </Text>
                </View>
              </View>
            </View>
            <View style={[
              styles.statusBadge,
              { backgroundColor: getStatusColor(order.inspection.status) + '20', alignSelf: 'center' }
            ]}>
              <Ionicons
                name={getStatusIcon(order.inspection.status) as any}
                size={14}
                color={getStatusColor(order.inspection.status)}
              />
              <Text style={[
                styles.statusText,
                { color: getStatusColor(order.inspection.status) }
              ]}>
                {order.inspection.status}
              </Text>
            </View>
          </View>

          {/* Inspection Results */}
          <View style={styles.sectionCard}>
            <View style={styles.sectionHeader}>
              <Ionicons name="clipboard" size={20} color="#3B82F6" />
              <Text style={styles.sectionTitle}>Inspection Results</Text>
            </View>
            
            {order.inspection.status === 'completed' ? (
              <View style={styles.sectionContent}>
                <View style={styles.inspectionGrid}>
                  {[
                    { label: 'Body Condition', value: order.inspection.bodyCondition },
                    { label: 'Engine Condition', value: order.inspection.engineCondition },
                    { label: 'Electrical Condition', value: order.inspection.electricalCondition },
                    { label: 'Tire Condition', value: order.inspection.tireCondition },
                    { label: 'Brake Condition', value: order.inspection.brakeCondition },
                    { label: 'Transmission Condition', value: order.inspection.transmissionCondition },
                  ].filter(item => item.value).map((item, index) => (
                    <View key={index} style={styles.inspectionResultItem}>
                      <Text style={styles.inspectionResultLabel}>{item.label}</Text>
                      <View style={styles.inspectionResultValue}>
                        <Ionicons name="ellipse" size={8} color="#3B82F6" />
                        <Text style={styles.inspectionResultText}>
                          {item.value || 'Not inspected'}
                        </Text>
                      </View>
                    </View>
                  ))}
                </View>
              </View>
            ) : (
              <View style={styles.inspectionStatusContainer}>
                <View style={styles.inspectionStatusIcon}>
                  <Ionicons
                    name={getStatusIcon(order.inspection.status) as any}
                    size={32}
                    color={getStatusColor(order.inspection.status)}
                  />
                </View>
                <Text style={styles.inspectionStatusTitle}>
                  {order.inspection.status === 'pending' ? 'Inspection Scheduled' :
                   order.inspection.status === 'in progress' ? 'Inspection In Progress' :
                   order.inspection.status === 'cancelled' ? 'Inspection Cancelled' :
                   `Inspection ${order.inspection.status}`}
                </Text>
                <Text style={styles.inspectionStatusDescription}>
                  {order.inspection.status === 'pending' 
                    ? "Your vehicle inspection is scheduled but has not been completed yet. We'll notify you once the inspection is complete."
                    : order.inspection.status === 'in progress'
                    ? "Your vehicle is currently being inspected by our technicians. Results will be available soon."
                    : order.inspection.status === 'cancelled'
                    ? "This inspection was cancelled. Please contact customer service if you need to reschedule."
                    : `The current status of your inspection is ${order.inspection.status}.`}
                </Text>
              </View>
            )}
          </View>

          {/* Inspection Notes */}
          {order.inspection.notes && (
            <View style={styles.sectionCard}>
              <View style={styles.sectionHeader}>
                <Ionicons name="document-text" size={20} color="#3B82F6" />
                <Text style={styles.sectionTitle}>Inspection Notes</Text>
              </View>
              <View style={styles.sectionContent}>
                <Text style={styles.notesText}>{order.inspection.notes}</Text>
              </View>
            </View>
          )}
        </>
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons name="shield-outline" size={64} color="#D1D5DB" />
          <Text style={styles.emptyText}>No Inspection Data</Text>
          <Text style={styles.emptySubtext}>This order does not include an inspection</Text>
        </View>
      )}
    </View>
  );

  const renderInvoiceTab = () => (
    <View style={styles.tabContent}>
      {invoice ? (
        <>
          {/* Invoice Header */}
          <View style={styles.invoiceHeader}>
            <View style={styles.invoiceHeaderLeft}>
              <View style={styles.invoiceIconContainer}>
                <Ionicons name="receipt" size={24} color="#3B82F6" />
              </View>
              <View>
                <Text style={styles.invoiceTitle}>Invoice #{invoice.invoice.invoiceId}</Text>
                <Text style={styles.invoiceDate}>
                  {formatDate(invoice.invoice.invoiceDate)}
                </Text>
              </View>
            </View>
            <View style={[
              styles.statusBadge,
              { backgroundColor: getStatusColor(invoice.invoice.status) + '20' }
            ]}>
              <Ionicons
                name={getStatusIcon(invoice.invoice.status) as any}
                size={14}
                color={getStatusColor(invoice.invoice.status)}
              />
              <Text style={[
                styles.statusText,
                { color: getStatusColor(invoice.invoice.status) }
              ]}>
                {invoice.invoice.status}
              </Text>
            </View>
          </View>

          {/* Customer & Vehicle Info */}
          <View style={styles.invoiceInfoGrid}>
            <View style={styles.invoiceInfoCard}>
              <View style={styles.sectionHeader}>
                <Ionicons name="person" size={16} color="#3B82F6" />
                <Text style={styles.invoiceInfoTitle}>Customer Information</Text>
              </View>
              <View style={styles.invoiceInfoContent}>
                <View style={styles.invoiceInfoRow}>
                  <Text style={styles.invoiceInfoLabel}>Name</Text>
                  <Text style={styles.invoiceInfoValue}>
                    {invoice.customer?.name || 'N/A'}
                  </Text>
                </View>
                <View style={styles.invoiceInfoRow}>
                  <Text style={styles.invoiceInfoLabel}>Email</Text>
                  <Text style={styles.invoiceInfoValue}>
                    {invoice.customer?.email || 'N/A'}
                  </Text>
                </View>
                <View style={styles.invoiceInfoRow}>
                  <Text style={styles.invoiceInfoLabel}>Phone</Text>
                  <Text style={styles.invoiceInfoValue}>
                    {invoice.customer?.phone || 'N/A'}
                  </Text>
                </View>
              </View>
            </View>

            <View style={styles.invoiceInfoCard}>
              <View style={styles.sectionHeader}>
                <Ionicons name="receipt" size={16} color="#3B82F6" />
                <Text style={styles.invoiceInfoTitle}>Invoice Information</Text>
              </View>
              <View style={styles.invoiceInfoContent}>
                <View style={styles.invoiceInfoRow}>
                  <Text style={styles.invoiceInfoLabel}>Issue Date</Text>
                  <Text style={styles.invoiceInfoValue}>
                    {formatDate(invoice.invoice.invoiceDate)}
                  </Text>
                </View>
                <View style={styles.invoiceInfoRow}>
                  <Text style={styles.invoiceInfoLabel}>Due Date</Text>
                  <Text style={[
                    styles.invoiceInfoValue,
                    invoice.invoice.status === 'overdue' && { color: '#EF4444' }
                  ]}>
                    {formatDate(invoice.invoice.dueDate)}
                  </Text>
                </View>
                <View style={styles.invoiceInfoRow}>
                  <Text style={styles.invoiceInfoLabel}>Status</Text>
                  <View style={[
                    styles.statusBadge,
                    { backgroundColor: getStatusColor(invoice.invoice.status) + '20' }
                  ]}>
                    <Text style={[
                      styles.statusText,
                      { color: getStatusColor(invoice.invoice.status) }
                    ]}>
                      {invoice.invoice.status}
                    </Text>
                  </View>
                </View>
              </View>
            </View>
          </View>

          {/* Invoice Summary */}
          <View style={styles.sectionCard}>
            <View style={styles.sectionHeader}>
              <Ionicons name="calculator" size={20} color="#3B82F6" />
              <Text style={styles.sectionTitle}>Summary</Text>
            </View>
            <View style={styles.sectionContent}>
              <View style={styles.invoiceSummary}>
                <View style={styles.invoiceSummaryRow}>
                  <Text style={styles.invoiceSummaryLabel}>Subtotal</Text>
                  <Text style={styles.invoiceSummaryValue}>
                    {formatCurrency(
                      invoice.invoice.subTotal || 
                      invoice.invoice.totalAmount || 0
                    )}
                  </Text>
                </View>
                <View style={styles.invoiceSummaryRow}>
                  <Text style={styles.invoiceSummaryLabel}>
                    Tax ({invoice.invoice.taxRate || 18}%)
                  </Text>
                  <Text style={styles.invoiceSummaryValue}>
                    {formatCurrency(
                      invoice.invoice.taxAmount || 
                      (parseFloat(invoice.invoice.totalAmount || '0') * 0.18)
                    )}
                  </Text>
                </View>
                <View style={[styles.invoiceSummaryRow, styles.totalSummaryRow]}>
                  <Text style={styles.totalSummaryLabel}>Total</Text>
                  <Text style={styles.totalSummaryValue}>
                    {formatCurrency(invoice.invoice.totalAmount || 0)}
                  </Text>
                </View>
              </View>
            </View>
          </View>

          {/* Invoice Actions */}
          <View style={styles.invoiceActions}>
            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => Alert.alert('View Invoice', 'Full invoice view coming soon')}
            >
              <Ionicons name="eye" size={20} color="#3B82F6" />
              <Text style={styles.actionButtonText}>View Full Invoice</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.actionButton}
              onPress={handlePrintInvoice}
            >
              <Ionicons name="print" size={20} color="#3B82F6" />
              <Text style={styles.actionButtonText}>Print</Text>
            </TouchableOpacity>
          </View>

          {/* Pay Now Button */}
          {invoice.invoice.status !== 'paid' && (
            <TouchableOpacity
              style={styles.payButton}
              onPress={handlePayInvoice}
            >
              <Ionicons name="card" size={20} color="#FFFFFF" />
              <Text style={styles.payButtonText}>Pay Now</Text>
            </TouchableOpacity>
          )}
        </>
      ) : (
        <View style={styles.emptyContainer}>
          <Ionicons name="receipt-outline" size={64} color="#D1D5DB" />
          <Text style={styles.emptyText}>No Invoice Available</Text>
          <Text style={styles.emptySubtext}>Invoice will be generated once the order is completed</Text>
        </View>
      )}
    </View>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3B82F6" />
        <Text style={styles.loadingText}>Loading order details...</Text>
      </View>
    );
  }

  if (error || !order) {
    return (
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
          >
            <Ionicons name="chevron-back" size={24} color="#1F2937" />
          </TouchableOpacity>
          <Text style={styles.title}>Order Details</Text>
        </View>
        
        <View style={styles.errorContainer}>
          <Ionicons name="alert-circle" size={64} color="#EF4444" />
          <Text style={styles.errorTitle}>Error Loading Order</Text>
          <Text style={styles.errorText}>{error || 'Order not found'}</Text>
          <TouchableOpacity
            style={styles.retryButton}
            onPress={fetchOrderDetails}
          >
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
        >
          <Ionicons name="chevron-back" size={24} color="#1F2937" />
        </TouchableOpacity>
        <View style={styles.headerTitleContainer}>
          <Text style={styles.title}>Order #{order.orderId}</Text>
          <Text style={styles.subtitle}>Placed on {formatDate(order.orderDate)}</Text>
        </View>
      </View>

      {/* Order Status Card */}
      <View style={styles.statusCard}>
        <View style={styles.statusHeader}>
          <View style={styles.statusInfo}>
            <Text style={styles.statusTitle}>Order Status</Text>
            <View style={[
              styles.statusBadge,
              { backgroundColor: getStatusColor(order.status) + '20' }
            ]}>
              <Ionicons
                name={getStatusIcon(order.status) as any}
                size={16}
                color={getStatusColor(order.status)}
              />
              <Text style={[
                styles.statusText,
                { color: getStatusColor(order.status) }
              ]}>
                {order.status}
              </Text>
            </View>
          </View>
          <View style={styles.amountInfo}>
            <Text style={styles.amountLabel}>Total Amount</Text>
            <Text style={styles.amountValue}>{formatCurrency(order.totalAmount)}</Text>
          </View>
        </View>
        
        {invoice && (
          <View style={styles.invoiceQuickInfo}>
            <View style={styles.invoiceQuickHeader}>
              <Ionicons name="receipt" size={16} color="#3B82F6" />
              <Text style={styles.invoiceQuickTitle}>Invoice #{invoice.invoice.invoiceId}</Text>
              <View style={[
                styles.statusBadge,
                { backgroundColor: getStatusColor(invoice.invoice.status) + '20' }
              ]}>
                <Text style={[
                  styles.statusText,
                  { color: getStatusColor(invoice.invoice.status), fontSize: 11 }
                ]}>
                  {invoice.invoice.status}
                </Text>
              </View>
            </View>
            {invoice.invoice.status !== 'paid' && (
              <TouchableOpacity
                style={styles.quickPayButton}
                onPress={handlePayInvoice}
              >
                <Ionicons name="card" size={16} color="#FFFFFF" />
                <Text style={styles.quickPayButtonText}>Pay Now</Text>
              </TouchableOpacity>
            )}
          </View>
        )}
      </View>

      {/* Tabs */}
      <View style={styles.tabContainer}>
        {renderTabButton('details', 'Details', 'document-text')}
        {renderTabButton('inspection', 'Inspection', 'shield-checkmark', 
          order.includesInspection && order.inspection)}
        {renderTabButton('invoice', 'Invoice', 'receipt', !!invoice)}
      </View>

      {/* Tab Content */}
      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {activeTab === 'details' && renderDetailsTab()}
        {activeTab === 'inspection' && renderInspectionTab()}
        {activeTab === 'invoice' && renderInvoiceTab()}
      </ScrollView>
    </View>
  );
};

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F9FAFB',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6B7280',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  backButton: {
    marginRight: 16,
    padding: 4,
  },
  headerTitleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  subtitle: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 2,
  },
  statusCard: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginTop: 16,
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  statusHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  statusInfo: {
    flex: 1,
  },
  statusTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  amountInfo: {
    alignItems: 'flex-end',
  },
  amountLabel: {
    fontSize: 12,
    color: '#6B7280',
  },
  amountValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#059669',
    marginTop: 2,
  },
  invoiceQuickInfo: {
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
  },
  invoiceQuickHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginBottom: 12,
  },
  invoiceQuickTitle: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
    flex: 1,
  },
  quickPayButton: {
    backgroundColor: '#059669',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 8,
    gap: 8,
  },
  quickPayButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginTop: 8,
    borderRadius: 12,
    padding: 4,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  tabButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    gap: 6,
  },
  activeTabButton: {
    backgroundColor: '#F3F4F6',
  },
  tabButtonText: {
    fontSize: 14,
    color: '#6B7280',
    fontWeight: '500',
  },
  activeTabButtonText: {
    color: '#3B82F6',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
  },
  tabContent: {
    gap: 16,
  },
  sectionCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    gap: 8,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  sectionContent: {
    gap: 12,
  },
  vehicleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    gap: 12,
  },
  vehicleIconContainer: {
    backgroundColor: '#DBEAFE',
    padding: 12,
    borderRadius: 12,
  },
  vehicleInfo: {
    flex: 1,
  },
  vehicleTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
  },
  vehicleBadges: {
    flexDirection: 'row',
    gap: 8,
  },
  badge: {
    backgroundColor: '#F3F4F6',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  badgeText: {
    fontSize: 12,
    color: '#374151',
    fontWeight: '500',
  },
  detailRows: {
    gap: 12,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  detailLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  detailValue: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
  },
  serviceItem: {
    gap: 12,
  },
  serviceHeader: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 12,
  },
  serviceIconContainer: {
    backgroundColor: '#DBEAFE',
    padding: 8,
    borderRadius: 8,
    marginTop: 2,
  },
  serviceInfo: {
    flex: 1,
  },
  serviceTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#3B82F6',
    marginBottom: 4,
  },
  serviceDescription: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 20,
  },
  serviceDetails: {
    gap: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
  },
  serviceDetailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  statusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
    gap: 4,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
    textTransform: 'capitalize',
  },
  additionalServiceItem: {
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  additionalServiceHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  additionalServiceTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#3B82F6',
    flex: 1,
  },
  additionalServicePrice: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1F2937',
  },
  additionalServiceDescription: {
    fontSize: 12,
    color: '#6B7280',
    marginBottom: 8,
    lineHeight: 16,
  },
  paymentSummary: {
    gap: 12,
  },
  paymentRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  paymentLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  paymentValue: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
  },
  totalRow: {
    borderBottomWidth: 0,
    paddingTop: 12,
    marginTop: 8,
    borderTopWidth: 2,
    borderTopColor: '#E5E7EB',
  },
  totalLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  totalValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#3B82F6',
  },
  paymentStatusSection: {
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
    borderStyle: 'dashed',
  },
  payButton: {
    backgroundColor: '#059669',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 12,
    gap: 8,
  },
  payButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  notesText: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 20,
  },
  inspectionScheduleCard: {
    backgroundColor: '#EBF8FF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#BFDBFE',
  },
  scheduleRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  scheduleItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    flex: 1,
  },
  scheduleIconContainer: {
    backgroundColor: '#DBEAFE',
    padding: 8,
    borderRadius: 8,
  },
  scheduleLabel: {
    fontSize: 12,
    color: '#3B82F6',
  },
  scheduleValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1E40AF',
  },
  inspectionGrid: {
    gap: 12,
  },
  inspectionResultItem: {
    backgroundColor: '#FFFFFF',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  inspectionResultLabel: {
    fontSize: 12,
    color: '#6B7280',
    marginBottom: 4,
  },
  inspectionResultValue: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  inspectionResultText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
  },
  inspectionStatusContainer: {
    alignItems: 'center',
    padding: 32,
  },
  inspectionStatusIcon: {
    marginBottom: 16,
  },
  inspectionStatusTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 8,
    textAlign: 'center',
  },
  inspectionStatusDescription: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 20,
  },
  invoiceHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  invoiceHeaderLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    flex: 1,
  },
  invoiceIconContainer: {
    backgroundColor: '#DBEAFE',
    padding: 8,
    borderRadius: 8,
  },
  invoiceTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  invoiceDate: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 2,
  },
  invoiceInfoGrid: {
    gap: 12,
    marginBottom: 16,
  },
  invoiceInfoCard: {
    backgroundColor: '#F9FAFB',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  invoiceInfoTitle: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
  },
  invoiceInfoContent: {
    gap: 8,
    marginTop: 8,
  },
  invoiceInfoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  invoiceInfoLabel: {
    fontSize: 12,
    color: '#6B7280',
  },
  invoiceInfoValue: {
    fontSize: 12,
    fontWeight: '500',
    color: '#1F2937',
    textAlign: 'right',
    flex: 1,
    marginLeft: 8,
  },
  invoiceSummary: {
    gap: 12,
  },
  invoiceSummaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  invoiceSummaryLabel: {
    fontSize: 14,
    color: '#6B7280',
  },
  invoiceSummaryValue: {
    fontSize: 14,
    fontWeight: '500',
    color: '#1F2937',
  },
  totalSummaryRow: {
    borderBottomWidth: 0,
    paddingTop: 12,
    marginTop: 8,
    borderTopWidth: 2,
    borderTopColor: '#E5E7EB',
  },
  totalSummaryLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  totalSummaryValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#3B82F6',
  },
  invoiceActions: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 16,
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E5E7EB',
    gap: 8,
  },
  actionButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#3B82F6',
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 64,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#4B5563',
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 4,
    textAlign: 'center',
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 32,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#EF4444',
    marginTop: 16,
    marginBottom: 8,
  },
  errorText: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 24,
  },
  retryButton: {
    backgroundColor: '#3B82F6',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '500',
  },
});

export default OrderDetailsScreen;


================================================
File: src/screens/customer/OrderHistoryScreen/index.tsx
================================================
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from '../../../context/AuthContext';
import { apiService } from '../../../services/apiService';
import { useNavigation } from '@react-navigation/native';
import { Link, router } from 'expo-router';



interface Order {
  orderId: number;
  status: string;
  orderDate: string;
  totalAmount: number;
  notes?: string;
  vehicleId?: number;
  serviceId?: number;
  includesInspection?: boolean;
  orderType?: string;
  paymentMethod?: string;
}

const OrderHistoryScreen = () => {
  const { user } = useAuth();
  const [orders, setOrders] = React.useState<Order[]>([]);
  const [loading, setLoading] = React.useState(true);
  const navigation = useNavigation();



  const fetchOrders = async () => {
    try {
      setLoading(true);
      const response = await apiService.getOrders();

      console.log('API Response:', response);

      if (response.success) {
        // The response.data should now be a clean array thanks to our API service fix
        const ordersData = Array.isArray(response.data) ? response.data : [];
        console.log('Orders data:', ordersData);
        setOrders(ordersData);
      } else {
        console.error('Failed to fetch orders:', response.message);
        Alert.alert('Error', response.message || 'Failed to fetch orders');
      }
    } catch (error) {
      console.error('Error fetching orders:', error);
      Alert.alert('Error', 'An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    fetchOrders();
  }, []);

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    } catch (error) {
      return 'Invalid Date';
    }
  };

  const formatCurrency = (amount: number) => {
    return `PKR ${amount?.toFixed(2) || '0.00'}`;
  };

  const renderOrderItem = ({ item }: { item: Order }) => (
    <TouchableOpacity
      style={styles.orderCard}
      onPress={() => {
        // TODO: Navigate to order details
        Alert.alert('Order Details', `Order ID: ${item.orderId}\nStatus: ${item.status}\nAmount: ${formatCurrency(item.totalAmount)}`);
      }}
    >
      <View style={styles.orderHeader}>
        <Text style={styles.orderId}>Order #{item.orderId}</Text>
        <View style={[
          styles.statusBadge,
          { backgroundColor: getStatusColor(item.status) }
        ]}>
          <Text style={styles.statusText}>{item.status}</Text>
        </View>
      </View>

      <View style={styles.orderDetails}>
        <View style={styles.detailRow}>
          <Ionicons name="calendar" size={20} color="#6B7280" />
          <Text style={styles.detailText}>{formatDate(item.orderDate)}</Text>
        </View>

        {item.orderType && (
          <View style={styles.detailRow}>
            <Ionicons name="storefront" size={20} color="#6B7280" />
            <Text style={styles.detailText}>{item.orderType}</Text>
          </View>
        )}

        {item.includesInspection && (
          <View style={styles.detailRow}>
            <Ionicons name="search" size={20} color="#6B7280" />
            <Text style={styles.detailText}>Includes Inspection</Text>
          </View>
        )}

        {item.paymentMethod && (
          <View style={styles.detailRow}>
            <Ionicons name="card" size={20} color="#6B7280" />
            <Text style={styles.detailText}>{item.paymentMethod}</Text>
          </View>
        )}
      </View>

      <View style={styles.orderFooter}>
        <Text style={styles.price}>{formatCurrency(item.totalAmount)}</Text>


        <TouchableOpacity
          style={styles.detailsButton}
          onPress={() => {
            try {
              router.push(`/order-details/${item.orderId}`);
            } catch (error) {
              console.log(error,"ERROR");
              
              console.error('Navigation error:', error);
              Alert.alert('Error', 'Unable to navigate to order details');
            }
          }}
        >
          <Text style={styles.detailsButtonText}>View Details</Text>
          <Ionicons name="chevron-forward" size={20} color="#3B82F6" />
        </TouchableOpacity>
      </View>
    </TouchableOpacity>
  );

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return '#10B981';
      case 'in progress':
        return '#3B82F6';
      case 'pending':
        return '#F59E0B';
      case 'cancelled':
        return '#EF4444';
      default:
        return '#6B7280';
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3B82F6" />
        <Text style={styles.loadingText}>Loading orders...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Order History</Text>
        <TouchableOpacity
          style={styles.filterButton}
          onPress={() => {
            // TODO: Implement filtering
            Alert.alert('Coming Soon', 'Filter functionality will be implemented soon');
          }}
        >
          <Ionicons name="filter" size={24} color="#3B82F6" />
        </TouchableOpacity>
      </View>

      <FlatList
        data={orders}
        renderItem={renderOrderItem}
        keyExtractor={(item) => item.orderId?.toString() || Math.random().toString()}
        contentContainerStyle={styles.listContainer}
        showsVerticalScrollIndicator={false}
        refreshing={loading}
        onRefresh={fetchOrders}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Ionicons name="document-text" size={64} color="#D1D5DB" />
            <Text style={styles.emptyText}>No orders found</Text>
            <Text style={styles.emptySubtext}>Your service history will appear here</Text>
            <TouchableOpacity
              style={styles.refreshButton}
              onPress={fetchOrders}
            >
              <Text style={styles.refreshButtonText}>Refresh</Text>
            </TouchableOpacity>
          </View>
        }
      />


    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#6B7280',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
  },
  filterButton: {
    padding: 8,
  },
  listContainer: {
    padding: 16,
  },
  orderCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  orderHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  orderId: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  statusText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
    textTransform: 'capitalize',
  },
  orderDetails: {
    gap: 8,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  detailText: {
    fontSize: 14,
    color: '#4B5563',
    textTransform: 'capitalize',
  },
  orderFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
  },
  price: {
    fontSize: 18,
    fontWeight: '600',
    color: '#059669',
  },
  detailsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  detailsButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#3B82F6',
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 48,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#4B5563',
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 4,
    textAlign: 'center',
  },
  refreshButton: {
    marginTop: 16,
    backgroundColor: '#3B82F6',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  refreshButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  debugContainer: {
    backgroundColor: '#FEF3C7',
    padding: 8,
    margin: 16,
    borderRadius: 8,
  },
  debugText: {
    fontSize: 12,
    color: '#92400E',
  },
});

export default OrderHistoryScreen;


================================================
File: src/services/apiService.ts
================================================
import axios, { AxiosError } from 'axios';
import { Platform } from 'react-native';
import * as SecureStore from 'expo-secure-store';

// Update API URL based on platform
const API_URL = Platform.select({
  android: 'https://d071-202-47-38-69.ngrok-free.app',
  ios: 'https://d071-202-47-38-69.ngrok-free.app',
  default: 'https://d071-202-47-38-69.ngrok-free.app'
});

// Create axios instance with custom config
const axiosInstance = axios.create({
  baseURL: API_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  }
});

// Helper function to process .NET response with $values
const processNetResponse = (data: any) => {
  // If it's an object with $values property, extract the array
  if (data && typeof data === 'object' && data.$values && Array.isArray(data.$values)) {
    return data.$values.map((item: any) => processNetResponseItem(item));
  }

  // If it's an array, process each item
  if (Array.isArray(data)) {
    return data.map((item: any) => processNetResponseItem(item));
  }

  // If it's a single object, process it
  if (data && typeof data === 'object') {
    return processNetResponseItem(data);
  }

  return data;
};

// Helper function to clean individual items (remove $id, $ref, etc.)
const processNetResponseItem = (item: any) => {
  if (!item || typeof item !== 'object') {
    return item;
  }

  const cleanItem: any = {};

  for (const [key, value] of Object.entries(item)) {
    // Skip .NET serialization properties
    if (key.startsWith('$')) {
      continue;
    }

    // Recursively process nested objects/arrays
    if (value && typeof value === 'object') {
      if (Array.isArray(value)) {
        cleanItem[key] = value.map(processNetResponseItem);
      } else if (value && typeof value === 'object' && '$values' in value && Array.isArray((value as any).$values)) {
        cleanItem[key] = processNetResponse(value);
      } else {
        cleanItem[key] = processNetResponseItem(value);
      }
    } else {
      cleanItem[key] = value;
    }
  }

  return cleanItem;
};

// Add request interceptor for logging
axiosInstance.interceptors.request.use(
  (config) => {
    console.log('Making request to:', config.url);
    console.log('Request headers:', config.headers);
    return config;
  },
  (error) => {
    console.error('Request error:', error);
    return Promise.reject(error);
  }
);

// Add response interceptor for better error handling and data processing
axiosInstance.interceptors.response.use(
  (response) => {
    console.log('Response received:', response.status);
    // Process the response data to handle .NET serialization
    response.data = processNetResponse(response.data);
    return response;
  },
  (error) => {
    if (error.code === 'ECONNABORTED') {
      console.error('Request timeout');
      return Promise.reject(new Error('Request timeout. Please check your connection.'));
    }
    if (!error.response) {
      console.error('Network Error:', error.message);
      return Promise.reject(new Error('Network error. Please check your connection and ensure the backend server is running.'));
    }
    console.error('API Error:', error.response?.data || error.message);
    return Promise.reject(error);
  }
);

class ApiService {
  private token: string | null = null;

  setAuthToken(token: string) {
    this.token = token;
    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  removeAuthToken() {
    this.token = null;
    delete axiosInstance.defaults.headers.common['Authorization'];
  }

  async login(credentials: { username: string; password: string }) {
    try {
      console.log('Attempting login to:', `${API_URL}/api/auth/login`);

      const response = await axiosInstance.post('/api/auth/login', credentials);
      console.log('Login response status:', response.status);
      console.log('Login response data:', response.data);

      if (response.data.token || response.data.success) {
        const token = response.data.token;
        if (token) {
          this.setAuthToken(token);
        }
        return { success: true, data: response.data };
      }
      return { success: false, message: "Login failed" };
    } catch (error: any) {
      console.error('Login error:', error.message);
      if (error.message.includes('Network error')) {
        return {
          success: false,
          message: 'Unable to connect to server. Please ensure the backend server is running and accessible.'
        };
      }
      return {
        success: false,
        message: error.response?.data?.message || 'Login failed. Please check your credentials.'
      };
    }
  }

  async register(userData: any) {
    try {
      console.log('Attempting registration to:', `${API_URL}/api/auth/register`);
      console.log('With data:', userData);

      const response = await axiosInstance.post('/api/auth/register', userData);
      console.log('Registration response:', response.data);

      if (response.data.token || response.data.success) {
        const token = response.data.token;
        if (token) {
          this.setAuthToken(token);
        }
        return { success: true, data: response.data };
      }
      return { success: false, message: "Registration failed" };
    } catch (error: any) {
      console.error('Registration error:', error.message);
      if (error.message.includes('Network error')) {
        return {
          success: false,
          message: 'Unable to connect to server. Please ensure the backend server is running and accessible.'
        };
      }
      return {
        success: false,
        message: error.response?.data?.message || 'Registration failed. Please try again.'
      };
    }
  }

  async getCurrentUser() {
    try {
      const response = await axiosInstance.get('/api/auth/me');
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Get user error:', error.message);
      if (error.message.includes('Network error')) {
        return {
          success: false,
          message: 'Unable to connect to server. Please ensure the backend server is running and accessible.'
        };
      }
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to get user data'
      };
    }
  }

  // Orders
  async getOrders() {
    try {
      const response = await axiosInstance.get('/api/orders');
      console.log('Orders response (processed):', response.data);

      // The response is already processed by the interceptor
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Get orders error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to fetch orders'
      };
    }
  }

  async createOrder(orderData: any) {
    try {
      const response = await axiosInstance.post('/api/orders', orderData);
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Create order error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to create order'
      };
    }
  }

  async getOrderDetails(orderId: number) {
    try {
      const response = await axiosInstance.get(`/api/orders/${orderId}`);
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Get order details error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to fetch order details'
      };
    }
  }

  // Vehicles
  async getVehicles() {
    try {
      const response = await axiosInstance.get('/api/vehicles');
      console.log('Vehicles response (processed):', response.data);

      // The response is already processed by the interceptor
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Get vehicles error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to fetch vehicles'
      };
    }
  }

  async addVehicle(vehicleData: any) {
    try {
      const response = await axiosInstance.post('/api/vehicles', vehicleData);
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Add vehicle error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to add vehicle'
      };
    }
  }

  async deleteVehicle(vehicleId: number) {
    try {
      const response = await axiosInstance.delete(`/api/vehicles/${vehicleId}`);
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Delete vehicle error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to delete vehicle'
      };
    }
  }

  // Services
  async getServices() {
    try {
      const response = await axiosInstance.get('/api/services');
      console.log('Services response (processed):', response.data);

      // The response is already processed by the interceptor
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Get services error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to fetch services'
      };
    }
  }

  // Notifications
  async getNotifications() {
    try {
      const response = await axiosInstance.get('/api/notifications');
      console.log('Notifications response (processed):', response.data);

      // The response is already processed by the interceptor
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Get notifications error:', error.message);
      return {
        success: false,
        message: error.response?.data?.message || 'Failed to fetch notifications'
      };
    }
  }

  async getInvoiceById(invoiceId: string) {
    try {
      const token = await SecureStore.getItemAsync('token');
      if (!token) {
        return { success: false, message: 'Authentication token not found' };
      }

      const response = await axiosInstance.get(
        `/api/Invoices/${invoiceId}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );

      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Get invoice error:', error.message);
      return { 
        success: false, 
        message: error.response?.data?.message || 'Failed to fetch invoice' 
      };
    }
  }

  async testConnection() {
    try {
      console.log('Testing connection to:', `${API_URL}/api/auth/test`);
      const response = await axiosInstance.get('/api/auth/test');
      console.log('Test response:', response.data);
      return { success: true, data: response.data };
    } catch (error: any) {
      console.error('Connection test error:', error.message);
      return {
        success: false,
        message: error.message || 'Failed to connect to server',
        error: error
      };
    }
  }
}

export const apiService = new ApiService();


================================================
File: src/types/declarations.d.ts
================================================
declare module '*.png';
declare module '*.jpg';
declare module '*.jpeg';
declare module '*.gif';
declare module '*.svg'; 


================================================
File: .expo/README.md
================================================
> Why do I have a folder named ".expo" in my project?
The ".expo" folder is created when an Expo project is started using "expo start" command.
> What do the files contain?
- "devices.json": contains information about devices that have recently opened this project. This is used to populate the "Development sessions" list in your development builds.
- "settings.json": contains the server configuration that is used to serve the application manifest.
> Should I commit the ".expo" folder?
No, you should not share the ".expo" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.
Upon project creation, the ".expo" folder is already added to your ".gitignore" file.



================================================
File: .expo/devices.json
================================================
{
  "devices": []
}



================================================
File: .expo/settings.json
================================================
{
  "urlRandomness": "W_4YVKQ"
}


